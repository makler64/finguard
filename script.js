    // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    let accounts = JSON.parse(localStorage.getItem('accounts')) || [];
    let transactions = JSON.parse(localStorage.getItem('transactions')) || [];
    let goals = JSON.parse(localStorage.getItem('goals')) || [];
    let categories = JSON.parse(localStorage.getItem('categories')) || {
        expense: [
            { id: 'food', name: '–ï–¥–∞', icon: 'üçï' },
            { id: 'transport', name: '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', icon: 'üöó' },
            { id: 'utilities', name: '–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ', icon: 'üè†' },
            { id: 'entertainment', name: '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', icon: 'üé¨' },
            { id: 'health', name: '–ó–¥–æ—Ä–æ–≤—å–µ', icon: 'üè•' },
            { id: 'shopping', name: '–®–æ–ø–∏–Ω–≥', icon: 'üõçÔ∏è' },
            { id: 'children', name: '–î–µ—Ç–∏', icon: 'üë∂' },
            { id: 'loan', name: '–ó–∞–µ–º', icon: 'üí≥' },
            { id: 'credit', name: '–ö—Ä–µ–¥–∏—Ç—ã', icon: 'üè¶' },
            { id: 'goals', name: '–¶–µ–ª–∏', icon: 'üéØ' },
            { id: 'other', name: '–î—Ä—É–≥–æ–µ', icon: 'üì¶' }
        ],
        income: [
            { id: 'salary', name: '–ó–∞—Ä–ø–ª–∞—Ç–∞', icon: 'üí∞' },
            { id: 'freelance', name: '–§—Ä–∏–ª–∞–Ω—Å', icon: 'üíª' },
            { id: 'investment', name: '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', icon: 'üìà' },
            { id: 'gift', name: '–ü–æ–¥–∞—Ä–æ–∫', icon: 'üéÅ' },
            { id: 'other', name: '–î—Ä—É–≥–æ–µ', icon: 'üì¶' }
        ]
    };
    
    let currentAccountId = accounts[0]?.id || 1;
    let charts = {};

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å –æ—Ç –¶–ë –†–§
    async function fetchPreviousDayRates() {
        try {
            const selectedCurrencies = getSelectedCurrencies();
            if (selectedCurrencies.length === 0) {
                return {};
            }
            
            const fiatCurrencies = selectedCurrencies.filter(currency => 
                !['BTC', 'ETH', 'BNB', 'ADA', 'SOL', 'DOT', 'MATIC', 'LINK'].includes(currency)
            );
            
            let previousRates = {};
            
            if (fiatCurrencies.length > 0) {
                try {
                    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å
                    const currentCbrResponse = await fetch('https://www.cbr-xml-daily.ru/daily_json.js');
                    if (!currentCbrResponse.ok) {
                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–∏—Ö –∫—É—Ä—Å–æ–≤ –æ—Ç –¶–ë –†–§, —Å—Ç–∞—Ç—É—Å:', currentCbrResponse.status);
                        return {};
                    }
                    
                    const currentCbrData = await currentCbrResponse.json();
                    
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
                    if (currentCbrData.PreviousURL) {
                        const previousUrl = `https://www.cbr-xml-daily.ru${currentCbrData.PreviousURL.replace('//www.cbr-xml-daily.ru', '')}`;
                        
                        const cbrResponse = await fetch(previousUrl);
                        
                        if (!cbrResponse.ok) {
                            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å –æ—Ç –¶–ë –†–§, —Å—Ç–∞—Ç—É—Å:', cbrResponse.status);
                            return {};
                        }
                        
                        const cbrData = await cbrResponse.json();
                    
                    if (cbrData.Valute) {
                        const cbrCurrencyMapping = {
                            'USD': 'USD',
                            'EUR': 'EUR',
                            'CNY': 'CNY',
                            'GBP': 'GBP',
                            'JPY': 'JPY'
                        };
                        
                        fiatCurrencies.forEach(currency => {
                            const cbrCode = cbrCurrencyMapping[currency];
                            if (cbrCode && cbrData.Valute[cbrCode]) {
                                previousRates[currency] = cbrData.Valute[cbrCode].Value;
                            }
                        });
                        
                        console.log('–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å –ø–æ–ª—É—á–µ–Ω—ã –æ—Ç –¶–ë –†–§:', Object.keys(previousRates));
                    } else {
                        console.log('–î–∞–Ω–Ω—ã–µ Valute –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –æ—Ç–≤–µ—Ç–µ –¶–ë –†–§');
                    }
                    } else {
                        console.log('–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ—Ç–≤–µ—Ç–µ –¶–ë –†–§');
                    }
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å –æ—Ç –¶–ë –†–§:', error);
                }
            }
            
            return previousRates;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å:', error);
            return {};
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
    async function fetchCurrencyRates() {
        try {
            const selectedCurrencies = getSelectedCurrencies();
            if (selectedCurrencies.length === 0) {
                return;
            }
            
            // –†–∞–∑–¥–µ–ª—è–µ–º –≤–∞–ª—é—Ç—ã –Ω–∞ —Ñ–∏–∞—Ç–Ω—ã–µ –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
            const fiatCurrencies = selectedCurrencies.filter(currency => 
                !['BTC', 'ETH', 'BNB', 'ADA', 'SOL', 'DOT', 'MATIC', 'LINK'].includes(currency)
            );
            const cryptoCurrencies = selectedCurrencies.filter(currency => 
                ['BTC', 'ETH', 'BNB', 'ADA', 'SOL', 'DOT', 'MATIC', 'LINK'].includes(currency)
            );
            
            let allRates = {};
            
            // –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã —Ñ–∏–∞—Ç–Ω—ã—Ö –≤–∞–ª—é—Ç –æ—Ç –¶–ë –†–§
            if (fiatCurrencies.length > 0) {
                try {
                    // API –¶–ë –†–§ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
                    const cbrResponse = await fetch('https://www.cbr-xml-daily.ru/daily_json.js');
                    
                    if (!cbrResponse.ok) {
                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –æ—Ç –¶–ë –†–§, —Å—Ç–∞—Ç—É—Å:', cbrResponse.status);
                        throw new Error(`HTTP ${cbrResponse.status}`);
                    }
                    
                    const cbrData = await cbrResponse.json();
                    
                    if (cbrData.Valute) {
                        // –ú–∞–ø–ø–∏–Ω–≥ –≤–∞–ª—é—Ç –¶–ë –†–§ –Ω–∞ –Ω–∞—à–∏ –∫–æ–¥—ã
                        const cbrCurrencyMapping = {
                            'USD': 'USD',
                            'EUR': 'EUR',
                            'CNY': 'CNY',
                            'GBP': 'GBP',
                            'JPY': 'JPY'
                        };
                        
                        fiatCurrencies.forEach(currency => {
                            const cbrCode = cbrCurrencyMapping[currency];
                            if (cbrCode && cbrData.Valute[cbrCode]) {
                                // –¶–ë –†–§ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫—É—Ä—Å –∑–∞ 1 –µ–¥–∏–Ω–∏—Ü—É –≤–∞–ª—é—Ç—ã –≤ —Ä—É–±–ª—è—Ö
                                allRates[currency] = cbrData.Valute[cbrCode].Value;
                            }
                        });
                        
                        console.log('–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –ø–æ–ª—É—á–µ–Ω—ã –æ—Ç –¶–ë –†–§:', Object.keys(allRates));
                    } else {
                        console.log('–î–∞–Ω–Ω—ã–µ Valute –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –æ—Ç–≤–µ—Ç–µ –¶–ë –†–§');
                    }
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –æ—Ç –¶–ë –†–§:', error);
                    
                    // Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π API –µ—Å–ª–∏ –¶–ë –†–§ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                try {
                    const fiatResponse = await fetch('https://api.exchangerate-api.com/v4/latest/RUB');
                    const fiatData = await fiatResponse.json();
                    if (fiatData.rates) {
                        allRates = { ...fiatData.rates };
                    }
                    } catch (fallbackError) {
                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ —Ñ–∏–∞—Ç–Ω—ã—Ö –≤–∞–ª—é—Ç (fallback):', fallbackError);
                    }
                }
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
            if (cryptoCurrencies.length > 0) {
                try {
                    const cryptoResponse = await fetch('https://api.coingecko.com/api/v3/simple/price?ids=bitcoin,ethereum,binancecoin,cardano,solana,polkadot,matic,chainlink&vs_currencies=rub');
                    const cryptoData = await cryptoResponse.json();
                    
                    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ CoinGecko –≤ —Ñ–æ—Ä–º–∞—Ç, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–æ–π
                    const cryptoMapping = {
                        'BTC': 'bitcoin',
                        'ETH': 'ethereum',
                        'BNB': 'binancecoin',
                        'ADA': 'cardano',
                        'SOL': 'solana',
                        'DOT': 'polkadot',
                        'MATIC': 'matic',
                        'LINK': 'chainlink'
                    };
                    
                    cryptoCurrencies.forEach(crypto => {
                        const coinId = cryptoMapping[crypto];
                        if (cryptoData[coinId] && cryptoData[coinId].rub) {
                            // –î–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫—É—Ä—Å –≤ —Ä—É–±–ª—è—Ö (–Ω–µ –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º)
                            allRates[crypto] = cryptoData[coinId].rub;
                        }
                    });
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç:', error);
                }
            }
            
            if (Object.keys(allRates).length > 0) {
                // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞–ª—é—Ç —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                
                // –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å –æ—Ç –¶–ë –†–§
                const previousDayRates = await fetchPreviousDayRates();
                
                // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã —Å –∫—É—Ä—Å–∞–º–∏ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å
                const ratesWithComparison = { ...allRates };
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∫—É—Ä—Å—ã –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                Object.keys(previousDayRates).forEach(currency => {
                    if (ratesWithComparison[currency]) {
                        ratesWithComparison[`${currency}_previous`] = previousDayRates[currency];
                    }
                });
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç —Å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º
                updateCurrencyRates(ratesWithComparison, true, previousDayRates);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –∫—É—Ä—Å—ã –≤ localStorage
                const now = new Date();
                const dataToSave = {
                    rates: allRates,
                    previousDayRates: previousDayRates,
                    timestamp: now.getTime()
                };
                localStorage.setItem('currencyRates', JSON.stringify(dataToSave));
                
                console.log('–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º:', Object.keys(allRates));
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç:', error);
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
    function updateCurrencyRates(rates, showChangeIndicators = true, previousDayRates = {}) {
        const selectedCurrencies = getSelectedCurrencies();
        const currencyContainer = document.getElementById('currencyRatesInline');
        
        if (!currencyContainer) {
            console.log('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç. –í—ã–±—Ä–∞–Ω–Ω—ã–µ –≤–∞–ª—é—Ç—ã:', selectedCurrencies);
        console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã:', Object.keys(rates || {}));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≤–∞–ª—é—Ç—ã
        if (selectedCurrencies.length === 0) {
            console.log('–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç, —Å–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä');
            currencyContainer.style.display = 'none';
            return;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–∫—Ä—ã—Ç
        currencyContainer.style.display = 'flex';
        

        
        // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        currencyContainer.innerHTML = '';
        
        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫—É—Ä—Å—ã –∏–∑ localStorage –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã
        if (Object.keys(previousDayRates).length === 0) {
            const savedRates = localStorage.getItem('currencyRates');
            if (savedRates) {
                try {
                    const data = JSON.parse(savedRates);
                    previousDayRates = data.previousDayRates || {};
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∫—É—Ä—Å–æ–≤:', error);
                }
            }
        }
        
        selectedCurrencies.forEach(currency => {
            if (rates && rates[currency]) {
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–∞–ª—é—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π
                const isCrypto = ['BTC', 'ETH', 'BNB', 'ADA', 'SOL', 'DOT', 'MATIC', 'LINK'].includes(currency);
                
                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫—É—Ä—Å –≤ —Ä—É–±–ª—è—Ö –∑–∞ 1 –µ–¥–∏–Ω–∏—Ü—É –≤–∞–ª—é—Ç—ã
                let rate;
                if (isCrypto) {
                    // –î–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∫—É—Ä—Å —É–∂–µ –≤ —Ä—É–±–ª—è—Ö
                    rate = rates[currency].toFixed(2);
                } else {
                    // –î–ª—è —Ñ–∏–∞—Ç–Ω—ã—Ö –≤–∞–ª—é—Ç –æ—Ç –¶–ë –†–§ –∫—É—Ä—Å —É–∂–µ –≤ —Ä—É–±–ª—è—Ö –∑–∞ 1 –µ–¥–∏–Ω–∏—Ü—É –≤–∞–ª—é—Ç—ã
                    rate = rates[currency].toFixed(2);
                }
                
                // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫—É—Ä—Å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (–∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å)
                const previousRate = previousDayRates[currency];
                
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–∞
                let changeIndicator = '';
                let changeClass = '';
                let rateValueClass = '';
                
                console.log(`–í–∞–ª—é—Ç–∞: ${currency}, –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: ${rates[currency]}, –ü—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å: ${previousRate}, –ö—Ä–∏–ø—Ç–æ: ${isCrypto}`);
                
                if (showChangeIndicators && previousRate && previousRate !== 0) {
                    let currentRateValue, previousRateValue;
                    
                    if (isCrypto) {
                        // –î–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø—Ä—è–º—ã–µ –∫—É—Ä—Å—ã –≤ —Ä—É–±–ª—è—Ö
                        currentRateValue = rates[currency];
                        previousRateValue = previousRate;
                    } else {
                        // –î–ª—è —Ñ–∏–∞—Ç–Ω—ã—Ö –≤–∞–ª—é—Ç –æ—Ç –¶–ë –†–§ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø—Ä—è–º—ã–µ –∫—É—Ä—Å—ã –≤ —Ä—É–±–ª—è—Ö
                        currentRateValue = rates[currency];
                        previousRateValue = previousRate;
                    }
                    
                    const change = currentRateValue - previousRateValue;
                    const changePercent = ((change / previousRateValue) * 100).toFixed(2);
                    
                    if (change > 0) {
                        // –ö—É—Ä—Å –≤—ã—Ä–æ—Å (–∑–µ–ª–µ–Ω—ã–π)
                        changeIndicator = `+${changePercent}%`;
                        changeClass = 'rate-up';
                        rateValueClass = 'rate-value-up';
                    } else if (change < 0) {
                        // –ö—É—Ä—Å —É–ø–∞–ª (–∫—Ä–∞—Å–Ω—ã–π)
                        changeIndicator = `${changePercent}%`;
                        changeClass = 'rate-down';
                        rateValueClass = 'rate-value-down';
                    }
                }
                
                // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤–∞–ª—é—Ç—ã
                const currencyElement = document.createElement('div');
                currencyElement.className = 'currency-item-inline';
                currencyElement.innerHTML = `
                    <div class="currency-info-inline">
                        <span class="currency-name-inline">${currency}</span>
                        <span class="currency-full-name-inline">${getCurrencyFullName(currency)}</span>
                    </div>
                    <div class="currency-rate-inline">
                        <span class="rate-value-inline ${rateValueClass}">${rate} ‚ÇΩ</span>
                        ${changeIndicator ? `<div class="change-indicator ${changeClass}">${changeIndicator}</div>` : ''}
                    </div>
                `;
                
                currencyContainer.appendChild(currencyElement);
            }
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤–∞–ª—é—Ç—ã
        const addedCurrencies = currencyContainer.children.length;
        console.log(`–î–æ–±–∞–≤–ª–µ–Ω–æ –≤–∞–ª—é—Ç –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: ${addedCurrencies}`);
        
        if (addedCurrencies === 0) {
            console.log('–ù–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –≤–∞–ª—é—Ç—ã, —Å–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä');
            currencyContainer.style.display = 'none';
        } else {
            console.log('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è');
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        updateLastUpdateTime();
    }



    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
    function updateLastUpdateTime() {
        const lastUpdateElement = document.getElementById('lastUpdateTime');
        if (!lastUpdateElement) return;
        
        const saved = localStorage.getItem('currencyRates');
        if (saved) {
            try {
                const data = JSON.parse(saved);
                if (data.timestamp) {
                    const updateDate = new Date(data.timestamp);
                    const now = new Date();
                    const diffMs = now - updateDate;
                    const diffMins = Math.floor(diffMs / 60000);
                    const diffHours = Math.floor(diffMs / 3600000);
                    const diffDays = Math.floor(diffMs / 86400000);
                    
                    let timeText;
                    if (diffMins < 1) {
                        timeText = '–¢–æ–ª—å–∫–æ —á—Ç–æ';
                    } else if (diffMins < 60) {
                        timeText = `${diffMins} –º–∏–Ω. –Ω–∞–∑–∞–¥`;
                    } else if (diffHours < 24) {
                        timeText = `${diffHours} —á. –Ω–∞–∑–∞–¥`;
                    } else {
                        timeText = `${diffDays} –¥–Ω. –Ω–∞–∑–∞–¥`;
                    }
                    
                    lastUpdateElement.textContent = timeText;
                    console.log('–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ:', timeText);
                } else {
                    lastUpdateElement.textContent = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
                lastUpdateElement.textContent = '–û—à–∏–±–∫–∞';
            }
        } else {
            lastUpdateElement.textContent = '–ù–µ –æ–±–Ω–æ–≤–ª—è–ª–æ—Å—å';
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∞–ª—é—Ç—ã
    function getCurrencyFullName(currency) {
        const names = {
            'USD': '–î–æ–ª–ª–∞—Ä –°–®–ê',
            'EUR': '–ï–≤—Ä–æ',
            'CNY': '–Æ–∞–Ω—å',
            'GBP': '–§—É–Ω—Ç —Å—Ç–µ—Ä–ª–∏–Ω–≥–æ–≤',
            'JPY': '–ò–µ–Ω–∞',
            // –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
            'BTC': 'Bitcoin',
            'ETH': 'Ethereum',
            'BNB': 'Binance Coin',
            'ADA': 'Cardano',
            'SOL': 'Solana',
            'DOT': 'Polkadot',
            'MATIC': 'Polygon',
            'LINK': 'Chainlink'
        };
        return names[currency] || currency;
    }



    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç
    function getSelectedCurrencies() {
        // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ —á–µ–∫–±–æ–∫—Å–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        const checkboxes = document.querySelectorAll('.currency-checkboxes input[type="checkbox"]:checked');
        if (checkboxes.length > 0) {
            const selected = Array.from(checkboxes).map(cb => cb.value);
            console.log('–í—ã–±—Ä–∞–Ω–Ω—ã–µ –≤–∞–ª—é—Ç—ã –∏–∑ —á–µ–∫–±–æ–∫—Å–æ–≤:', selected);
            return selected;
        }
        
        // –ï—Å–ª–∏ —á–µ–∫–±–æ–∫—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ localStorage
        const savedSettings = localStorage.getItem('currencySettings');
        if (savedSettings) {
            try {
                const settings = JSON.parse(savedSettings);
                const selected = Object.keys(settings).filter(currency => settings[currency]);
                console.log('–í—ã–±—Ä–∞–Ω–Ω—ã–µ –≤–∞–ª—é—Ç—ã –∏–∑ localStorage:', selected);
                return selected;
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–∞–ª—é—Ç:', error);
            }
        }
        
        // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
        console.log('–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç');
        return [];
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–∞–ª—é—Ç
    function loadCurrencySettings() {
        // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ
        if (currencySettingsLoaded) {
            return;
        }
        currencySettingsLoaded = true;
        console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–∞–ª—é—Ç...');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–∞ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
        const savedAccordionState = localStorage.getItem('currencyAccordionState');
        const accordionContent = document.getElementById('currencyAccordionContent');
        
        if (accordionContent && savedAccordionState === 'expanded') {
            accordionContent.classList.add('expanded');
            accordionContent.classList.remove('collapsed');
            const toggle = document.querySelector('[data-accordion="currency"] .accordion-toggle');
            if (toggle) {
                toggle.classList.add('expanded');
            }
        } else if (accordionContent) {
            accordionContent.classList.add('collapsed');
            accordionContent.classList.remove('expanded');
        }
        
        const savedSettings = localStorage.getItem('currencySettings');
        if (savedSettings) {
            try {
                const settings = JSON.parse(savedSettings);
                console.log('–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞–ª—é—Ç:', settings);
                
                Object.keys(settings).forEach(currency => {
                    const checkbox = document.querySelector(`.currency-checkboxes input[value="${currency}"]`);
                    if (checkbox) {
                        checkbox.checked = settings[currency];
                        console.log(`–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ–∫–±–æ–∫—Å –¥–ª—è ${currency}: ${settings[currency]}`);
                    } else {
                        console.log(`–ß–µ–∫–±–æ–∫—Å –¥–ª—è ${currency} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ`);
                    }
                });
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≤–∞–ª—é—Ç—ã
                const selectedCurrencies = Object.keys(settings).filter(currency => settings[currency]);
                console.log('–í—ã–±—Ä–∞–Ω–Ω—ã–µ –≤–∞–ª—é—Ç—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏:', selectedCurrencies);
                
                if (selectedCurrencies.length === 0) {
                    // –ï—Å–ª–∏ –≤—Å–µ –≤–∞–ª—é—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã, —Å–∫—Ä—ã–≤–∞–µ–º –±–ª–æ–∫ –∫—É—Ä—Å–æ–≤
                    const currencyContainer = document.getElementById('currencyRatesInline');
                    if (currencyContainer) {
                        currencyContainer.style.display = 'none';
                        console.log('–ë–ª–æ–∫ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç —Å–∫—Ä—ã—Ç (–Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç)');
                    }
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–∞–ª—é—Ç:', error);
                // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                setDefaultCurrencySettings();
            }
        } else {
            console.log('–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–∞–ª—é—Ç, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
            // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            setDefaultCurrencySettings();
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        updateLastUpdateTime();
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–∞–ª—é—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    function setDefaultCurrencySettings() {
        console.log('–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–∞–ª—é—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        const existingSettings = localStorage.getItem('currencySettings');
        if (existingSettings) {
            console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞–ª—é—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º');
            return;
        }
        
        const defaultCurrencies = ['USD', 'EUR', 'CNY'];
        console.log('–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∞–ª—é—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:', defaultCurrencies);
        
        defaultCurrencies.forEach(currency => {
            const checkbox = document.querySelector(`.currency-checkboxes input[value="${currency}"]`);
            if (checkbox) {
                checkbox.checked = true;
                console.log(`–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ–∫–±–æ–∫—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è ${currency}`);
            } else {
                console.log(`–ß–µ–∫–±–æ–∫—Å –¥–ª—è ${currency} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é`);
            }
        });
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
        const settings = {};
        defaultCurrencies.forEach(currency => {
            settings[currency] = true;
        });
        localStorage.setItem('currencySettings', JSON.stringify(settings));
        console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞–ª—é—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:', settings);
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
    function isCurrencyRatesActive() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≤–∞–ª—é—Ç—ã
        const selectedCurrencies = getSelectedCurrencies();
        return selectedCurrencies.length > 0;
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤
    function startAutoUpdate() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å—ã –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏ –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç –¥–ª—è —Ñ–∏–∞—Ç–Ω—ã—Ö –≤–∞–ª—é—Ç
        setInterval(async () => {
            if (isCurrencyRatesActive()) {
                try {
                    await fetchCurrencyRates();
                    console.log('–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
                    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    updateLastUpdateTime();
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤:', error);
                }
            }
        }, 5 * 60 * 1000); // 5 –º–∏–Ω—É—Ç
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç –¥–ª—è —Ñ–∏–∞—Ç–Ω—ã—Ö –≤–∞–ª—é—Ç
        setInterval(async () => {
            if (isCurrencyRatesActive()) {
                try {
                    await fetchCurrencyRates();
                    console.log('–ö—É—Ä—Å—ã —Ñ–∏–∞—Ç–Ω—ã—Ö –≤–∞–ª—é—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
                    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    updateLastUpdateTime();
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–∏–∞—Ç–Ω—ã—Ö –≤–∞–ª—é—Ç:', error);
                }
            }
        }, 15 * 60 * 1000); // 15 –º–∏–Ω—É—Ç
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–∞–ª—é—Ç
    function saveCurrencySettings() {
        const checkboxes = document.querySelectorAll('.currency-checkboxes input[type="checkbox"]');
        const settings = {};
        
        console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–∞–ª—é—Ç. –ù–∞–π–¥–µ–Ω–æ —á–µ–∫–±–æ–∫—Å–æ–≤:', checkboxes.length);
        
        checkboxes.forEach(cb => {
            settings[cb.value] = cb.checked;
            console.log(`–í–∞–ª—é—Ç–∞ ${cb.value}: ${cb.checked ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–≤—ã–∫–ª—é—á–µ–Ω–∞'}`);
        });
        
        localStorage.setItem('currencySettings', JSON.stringify(settings));
        console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞–ª—é—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage:', settings);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≤–∞–ª—é—Ç—ã
        const selectedCurrencies = Object.keys(settings).filter(currency => settings[currency]);
        
        if (selectedCurrencies.length === 0) {
            // –ï—Å–ª–∏ –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç, —Å–∫—Ä—ã–≤–∞–µ–º –≤–µ—Å—å –±–ª–æ–∫ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
            const currencyContainer = document.getElementById('currencyRatesInline');
            if (currencyContainer) {
                currencyContainer.style.display = 'none';
            }
            console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞–ª—é—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –í—Å–µ –≤–∞–ª—é—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã.');
            return;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤
        const savedRates = localStorage.getItem('currencyRates');
        if (savedRates) {
            try {
                const data = JSON.parse(savedRates);
                const now = new Date().getTime();
                const fiveMinutes = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
                const fifteenMinutes = 15 * 60 * 1000; // 15 –º–∏–Ω—É—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã —Å—Ä–µ–¥–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
                const hasCrypto = selectedCurrencies.some(currency => 
                    ['BTC', 'ETH', 'BNB', 'ADA', 'SOL', 'DOT', 'MATIC', 'LINK'].includes(currency)
                );
                
                // –î–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (5 –º–∏–Ω—É—Ç)
                // –î–ª—è —Ñ–∏–∞—Ç–Ω—ã—Ö –≤–∞–ª—é—Ç - 15 –º–∏–Ω—É—Ç
                const maxAge = hasCrypto ? fiveMinutes : fifteenMinutes;
                
                if (now - data.timestamp < maxAge) {
                    updateCurrencyRates(data.rates, true, data.previousDayRates || {});
                } else {
                    // –ï—Å–ª–∏ –∫—É—Ä—Å—ã —É—Å—Ç–∞—Ä–µ–ª–∏, –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ
                    fetchCurrencyRates();
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤:', error);
                // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –∫—É—Ä—Å—ã
                fetchCurrencyRates();
            }
        } else {
            // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤, –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ
            fetchCurrencyRates();
        }
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Ç–∏—Ö–æ
        console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞–ª—é—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!');
        
        // –ï—Å–ª–∏ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –∞–∫—Ç–∏–≤–Ω—ã, –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Ö
        if (isCurrencyRatesActive()) {
            setTimeout(() => {
                fetchCurrencyRates();
            }, 1000); // –û–±–Ω–æ–≤–ª—è–µ–º —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        updateLastUpdateTime();
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
    function loadSavedCurrencyRates() {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞–ª—é—Ç —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        
        const saved = localStorage.getItem('currencyRates');
        if (saved) {
            try {
                const data = JSON.parse(saved);
                const now = new Date().getTime();
                const fiveMinutes = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
                const fifteenMinutes = 15 * 60 * 1000; // 15 –º–∏–Ω—É—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã —Å—Ä–µ–¥–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
                const selectedCurrencies = getSelectedCurrencies();
                const hasCrypto = selectedCurrencies.some(currency => 
                    ['BTC', 'ETH', 'BNB', 'ADA', 'SOL', 'DOT', 'MATIC', 'LINK'].includes(currency)
                );
                
                // –î–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (5 –º–∏–Ω—É—Ç)
                // –î–ª—è —Ñ–∏–∞—Ç–Ω—ã—Ö –≤–∞–ª—é—Ç - 15 –º–∏–Ω—É—Ç
                const maxAge = hasCrypto ? fiveMinutes : fifteenMinutes;
                
                if (now - data.timestamp < maxAge) {
                    // –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    // –∏—Å–ø–æ–ª—å–∑—É—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å
                    updateCurrencyRates(data.rates, true, data.previousDayRates || {});
                    return;
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤:', error);
            }
        }
        
        // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –∏–ª–∏ –æ–Ω–∏ —É—Å—Ç–∞—Ä–µ–ª–∏, –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ
        fetchCurrencyRates();
    }

    // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–±–∞
    function updateTabIndicator(activeTab) {
        const tabsNav = document.querySelector('.tabs-nav');
        let indicator = tabsNav.querySelector('.tab-indicator');
        
        if (!indicator) {
            indicator = document.createElement('div');
            indicator.className = 'tab-indicator';
            tabsNav.appendChild(indicator);
        }
        
        const tabRect = activeTab.getBoundingClientRect();
        const navRect = tabsNav.getBoundingClientRect();
        
        indicator.style.left = (tabRect.left - navRect.left) + 'px';
        indicator.style.width = tabRect.width + 'px';
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
    function initApp() {
        // –ü–æ–¥–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –±—Ä–∞—É–∑–µ—Ä–Ω—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
        window.addEventListener('error', (e) => {
            if (e.message && (
                e.message.includes('message port closed') || 
                e.message.includes('message channel closed') ||
                e.message.includes('listener indicated an asynchronous response') ||
                e.message.includes('Extension context invalidated') ||
                e.message.includes('Could not establish connection')
            )) {
                e.preventDefault();
                e.stopPropagation();
                return false;
            }
        });
        
        // –ü–æ–¥–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –≤ Promise
        window.addEventListener('unhandledrejection', (e) => {
            if (e.reason && e.reason.message && (
                e.reason.message.includes('message port closed') || 
                e.reason.message.includes('message channel closed') ||
                e.reason.message.includes('listener indicated an asynchronous response') ||
                e.reason.message.includes('Extension context invalidated') ||
                e.reason.message.includes('Could not establish connection')
            )) {
                e.preventDefault();
                e.stopPropagation();
                return false;
            }
        });
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–≤—ã–π –ª–∏ —ç—Ç–æ –∑–∞–ø—É—Å–∫
        const isFirstRun = !localStorage.getItem('appInitialized');
        if (isFirstRun) {
            // –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
            localStorage.clear();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –º–∞—Å—Å–∏–≤—ã
            accounts = [];
            transactions = [];
            goals = [];
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
            localStorage.setItem('darkMode', 'true'); // –¢–µ–º–Ω–∞—è —Ç–µ–º–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            localStorage.setItem('accountsAccordionState', 'expanded'); // –û—Ç–∫—Ä—ã—Ç–∞—è –ø–ª–∞—à–∫–∞ —Å—á–µ—Ç–æ–≤
            localStorage.setItem('mainAccountsAccordionState', 'expanded'); // –û—Ç–∫—Ä—ã—Ç–∞—è –ø–ª–∞—à–∫–∞ "–ú–æ–∏ —Å—á–µ—Ç–∞"
            localStorage.setItem('currencyAccordionState', 'collapsed'); // –ó–∞–∫—Ä—ã—Ç–∞—è –ø–ª–∞—à–∫–∞ –≤–∞–ª—é—Ç
            localStorage.setItem('categoriesAccordionState', 'collapsed'); // –ó–∞–∫—Ä—ã—Ç–∞—è –ø–ª–∞—à–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            localStorage.setItem('filtersAccordionState', 'collapsed'); // –ó–∞–∫—Ä—ã—Ç–∞—è –ø–ª–∞—à–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
            localStorage.setItem('appInitialized', 'true');
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
            updateLocalStorage();
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
        const savedAccounts = localStorage.getItem('accounts');
        const savedTransactions = localStorage.getItem('transactions');
        const savedGoals = localStorage.getItem('goals');
        const savedCategories = localStorage.getItem('categories');
        
        if (savedAccounts) {
            accounts = JSON.parse(savedAccounts);
        }
        
        if (savedTransactions) {
            transactions = JSON.parse(savedTransactions);
        }
        
        if (savedGoals) {
            goals = JSON.parse(savedGoals);
        }
        
        if (savedCategories) {
            categories = JSON.parse(savedCategories);
        }
        
        updateLocalStorage();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ DOM
        setTimeout(() => {
            renderAccounts();
            renderTransactions();
            renderGoals();
            showPlaceholdersIfNeeded(); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            updateDashboard();
            
            // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
            eventListenersSetup = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            setupEventListeners();
        }, 100);
        initCharts();
        setupEventListeners();
        initFilters();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞–ª—é—Ç
        loadCurrencySettings();
        

        
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        const savedCategoriesAccordionState = localStorage.getItem('categoriesAccordionState');
        const categoriesAccordionContent = document.getElementById('categoriesAccordionContent');
        if (categoriesAccordionContent && savedCategoriesAccordionState === 'expanded') {
            categoriesAccordionContent.classList.add('expanded');
            categoriesAccordionContent.classList.remove('collapsed');
            const toggle = document.querySelector('[data-accordion="categories"] .accordion-toggle');
            if (toggle) {
                toggle.classList.add('expanded');
            }
        } else if (categoriesAccordionContent) {
            categoriesAccordionContent.classList.add('collapsed');
            categoriesAccordionContent.classList.remove('expanded');
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
        loadSavedCurrencyRates();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤
        startAutoUpdate();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        setTimeout(() => {
            updateLastUpdateTime();
        }, 500);
        

        

        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        loadCategoriesSettings();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–æ–≤
        setTimeout(() => {
            initAccordions();
        }, 500);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≥–ª—É—à–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        setTimeout(() => {
            showPlaceholdersIfNeeded();
        }, 100);
        
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
        document.querySelectorAll('.tab-content').forEach(tab => {
            tab.classList.remove('active');
        });
        document.getElementById('transactions-tab').classList.add('active');
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–±–∞
        const activeTab = document.querySelector('.tab-item.active');
        if (activeTab) {
            updateTabIndicator(activeTab);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–±–∞
        const firstActiveTab = document.getElementById('transactions-tab');
        if (firstActiveTab) {
            setTimeout(() => {
                firstActiveTab.classList.add('fade-in');
            }, 100);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Å—è—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        updateMonthlyStats();
        

    }



    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ localStorage
    function updateLocalStorage() {
        localStorage.setItem('accounts', JSON.stringify(accounts));
        localStorage.setItem('transactions', JSON.stringify(transactions));
        localStorage.setItem('goals', JSON.stringify(goals));
        localStorage.setItem('categories', JSON.stringify(categories));
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage


    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID
    function generateId(items) {
        return items.length > 0 ? Math.max(...items.map(item => item.id)) + 1 : 1;
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    function generateCategoryId(type) {
        const allCategories = [...categories.expense, ...categories.income];
        let maxId = 0;
        
        allCategories.forEach(category => {
            if (typeof category.id === 'string') {
                // –î–ª—è —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö ID –ø—Ä–æ—Å—Ç–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è
                return;
            } else if (typeof category.id === 'number') {
                maxId = Math.max(maxId, category.id);
            }
        });
        
        // –ï—Å–ª–∏ –≤—Å–µ ID —Å—Ç—Ä–æ–∫–æ–≤—ã–µ, —Å–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –∏–º—è
        const baseName = type === 'expense' ? 'expense_' : 'income_';
        const timestamp = Date.now();
        return baseName + timestamp;
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    function loadCategoriesSettings() {
        const expenseCategoriesList = document.getElementById('expenseCategoriesList');
        const incomeCategoriesList = document.getElementById('incomeCategoriesList');
        
        // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ
        if (categoriesSettingsLoaded) {
            return;
        }
        categoriesSettingsLoaded = true;
        
        console.log('loadCategoriesSettings called');
        console.log('expenseCategoriesList:', expenseCategoriesList);
        console.log('incomeCategoriesList:', incomeCategoriesList);
        console.log('categories:', categories);
        
        if (!expenseCategoriesList || !incomeCategoriesList) {
            console.log('Categories lists not found, returning');
            return;
        }
        
        // –û—á–∏—Å—Ç–∫–∞
        expenseCategoriesList.innerHTML = '';
        incomeCategoriesList.innerHTML = '';
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
        categories.expense.forEach(category => {
            const categoryItem = createCategorySettingsItem(category, 'expense');
            expenseCategoriesList.appendChild(categoryItem);
        });
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤
        categories.income.forEach(category => {
            const categoryItem = createCategorySettingsItem(category, 'income');
            incomeCategoriesList.appendChild(categoryItem);
        });
        
        console.log('Categories loaded successfully');
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    function createCategorySettingsItem(category, type) {
        const categoryItem = document.createElement('div');
        categoryItem.className = 'category-settings-item';
        
        categoryItem.innerHTML = `
            <div class="category-settings-info">
                <span class="category-settings-icon">${category.icon}</span>
                <div class="category-settings-details">
                    <div class="category-settings-name">${category.name}</div>
                    <div class="category-settings-type">${type === 'expense' ? '–†–∞—Å—Ö–æ–¥' : '–î–æ—Ö–æ–¥'}</div>
                </div>
            </div>
            <div class="category-settings-actions">
                <button class="category-settings-btn edit edit-category" data-id="${category.id}" data-type="${type}" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                        <path d="M20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83zM3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25z"/>
                    </svg>
                </button>
                <button class="category-settings-btn delete delete-category" data-id="${category.id}" data-type="${type}" title="–£–¥–∞–ª–∏—Ç—å">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                        <path d="M6 19c0 1.1.9 2 2 2h8c1.41 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"/>
                    </svg>
                </button>
            </div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è
        const editBtn = categoryItem.querySelector('.edit-category');
        const deleteBtn = categoryItem.querySelector('.delete-category');
        
        editBtn.addEventListener('click', () => editCategory(category.id, type));
        deleteBtn.addEventListener('click', () => deleteCategory(category.id, type));
        
        return categoryItem;
    }

    // –†–µ–Ω–¥–µ—Ä —Å—á–µ—Ç–æ–≤
    function renderAccounts() {
        const accountSelector = document.getElementById('accountSelector');
        const accountsList = document.getElementById('accountsList');
        const transactionAccountSelect = document.getElementById('transactionAccount');
        

        
        if (!accountSelector || !accountsList) return;
        
        // –û—á–∏—Å—Ç–∫–∞
        accountSelector.innerHTML = '';
        accountsList.innerHTML = '';
        if (transactionAccountSelect) {
            transactionAccountSelect.innerHTML = '';
        }
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–æ–≤ –≤ —Å–µ–ª–µ–∫—Ç–æ—Ä
        accounts.forEach(account => {
            const accountItem = document.createElement('div');
            accountItem.className = 'account-item';
            accountItem.dataset.id = account.id;
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É –ª–æ–≥–æ—Ç–∏–ø–∞ –±–∞–Ω–∫–∞
            let icon = '';
            if (account.bank && account.bank !== '') {
                icon = `<div class="bank-logo ${account.bank}"></div>`;
            } else {
                // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏–∫–æ–Ω–∫–∏ –ø–æ —Ç–∏–ø—É —Å—á–µ—Ç–∞
                icon = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="20" height="20" fill="currentColor"><path d="M20 4H4c-1.11 0-1.99.89-1.99 2L2 18c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V6c0-1.11-.89-2-2-2zm-1 14H5c-.55 0-1-.45-1-1V8h16v9c0 .55-.45 1-1 1z"/></svg>';
                if (account.type === 'cash') icon = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="20" height="20" fill="currentColor"><path d="M20 4H4c-1.11 0-1.99.89-1.99 2L2 18c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V6c0-1.11-.89-2-2-2zm0 14H4V8h16v10zm-8-2c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0-6c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2z"/></svg>';
                if (account.type === 'credit') icon = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="20" height="20" fill="currentColor"><path d="M20 4H4c-1.11 0-1.99.89-1.99 2L2 18c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V6c0-1.11-.89-2-2-2zm-1 14H5c-.55 0-1-.45-1-1V8h16v9c0 .55-.45 1-1 1z"/></svg>';
                if (account.type === 'savings') icon = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="20" height="20" fill="currentColor"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/></svg>';
                if (account.type === 'investment') icon = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="20" height="20" fill="currentColor"><path d="M3.5 18.49l6-6.01 4 4L22 6.92l-1.41-1.41-7.09 7.97-4-4L2 16.99z"/></svg>';
            }
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞ –∏ —Ç–∏–ø —Å—á–µ—Ç–∞
            const bankName = account.bankName || '';
            const accountTypeName = account.type === 'cash' ? '–ù–∞–ª–∏—á–Ω—ã–µ' : 
                account.type === 'card' ? '–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞' : 
                account.type === 'credit' ? '–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞' : 
                account.type === 'savings' ? '–°–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω—ã–π —Å—á–µ—Ç' : '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π —Å—á–µ—Ç';
            
            accountItem.innerHTML = `
                ${icon}
                <div>
                    <div style="font-size: 13px; color: var(--text-primary); font-weight: 500;">${bankName}</div>
                    <div style="font-size: 12px; color: var(--text-secondary); margin-top: 2px;">${accountTypeName}</div>
                    <div style="font-size: 14px; color: var(--text-primary); margin-top: 4px; font-weight: 600;">${account.balance.toFixed(2)} ${account.currency}</div>
                </div>
            `;
            
            accountSelector.appendChild(accountItem);
            
            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫
            if (transactionAccountSelect) {
                const option = document.createElement('option');
                option.value = account.id;
                option.textContent = `${account.name} (${account.balance.toFixed(2)} ${account.currency})`;
                transactionAccountSelect.appendChild(option);
            }
        });

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "+" –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å—á–µ—Ç–∞ –∏–ª–∏ –∑–∞–≥–ª—É—à–∫–∏
        if (accounts.length === 0) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –∫–æ–≥–¥–∞ —Å—á–µ—Ç–æ–≤ –Ω–µ—Ç
            const placeholder = document.createElement('div');
            placeholder.className = 'accounts-placeholder';
            placeholder.innerHTML = `
                <div class="placeholder-icon">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="48" height="48" fill="currentColor">
                        <path d="M20 4H4c-1.11 0-1.99.89-1.99 2L2 18c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V6c0-1.11-.89-2-2-2zm-1 14H5c-.55 0-1-.45-1-1V8h16v9c0 .55-.45 1-1 1z"/>
                    </svg>
                </div>
                <h3>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—á–µ—Ç–æ–≤</h3>
                <p>–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —Å—á–µ—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏</p>
                <button class="btn btn-primary create-account-btn" onclick="openAccountModal()">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="16" height="16">
                        <path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>
                    </svg>
                    –°–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç
                </button>
            `;
            accountSelector.appendChild(placeholder);
        } else {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "+" –∫–æ–≥–¥–∞ –µ—Å—Ç—å —Å—á–µ—Ç–∞
            const addAccountButton = document.createElement('button');
            addAccountButton.className = 'add-account-btn';
            addAccountButton.innerHTML = `
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                    <path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>
                </svg>
            `;
            addAccountButton.addEventListener('click', openAccountModal);
            accountSelector.appendChild(addAccountButton);
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—á–µ—Ç–æ–≤
        setTimeout(() => {
            const accountItems = accountSelector.querySelectorAll('.account-item, .add-account-btn, .accounts-placeholder');
            accountItems.forEach((item) => {
                item.classList.add('animate');
            });
        }, 300);
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–æ–≤ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫)
        const accountsSettingsList = document.createElement('div');
        accountsSettingsList.className = 'accounts-settings-list';
        
        if (accounts.length === 0) {
            accountsSettingsList.innerHTML = `
                <div style="text-align: center; color: var(--text-secondary); padding: 20px;">
                    <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—á–µ—Ç–æ–≤</p>
                </div>
            `;
        } else {
            accounts.forEach(account => {
                const accountItem = document.createElement('div');
                accountItem.className = 'account-settings-item';
                
                let icon = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="20" height="20" fill="currentColor"><path d="M20 4H4c-1.11 0-1.99.89-1.99 2L2 18c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V6c0-1.11-.89-2-2-2zm-1 14H5c-.55 0-1-.45-1-1V8h16v9c0 .55-.45 1-1 1z"/></svg>';
                if (account.type === 'cash') icon = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="20" height="20" fill="currentColor"><path d="M20 4H4c-1.11 0-1.99.89-1.99 2L2 18c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V6c0-1.11-.89-2-2-2zm0 14H4V8h16v10zm-8-2c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0-6c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2z"/></svg>';
                if (account.type === 'credit') icon = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="20" height="20" fill="currentColor"><path d="M20 4H4c-1.11 0-1.99.89-1.99 2L2 18c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V6c0-1.11-.89-2-2-2zm-1 14H5c-.55 0-1-.45-1-1V8h16v9c0 .55-.45 1-1 1z"/></svg>';
                if (account.type === 'savings') icon = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="20" height="20" fill="currentColor"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/></svg>';
                if (account.type === 'investment') icon = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="20" height="20" fill="currentColor"><path d="M3.5 18.49l6-6.01 4 4L22 6.92l-1.41-1.41-7.09 7.97-4-4L2 16.99z"/></svg>';
                
                const accountTypeName = account.type === 'cash' ? '–ù–∞–ª–∏—á–Ω—ã–µ' : 
                    account.type === 'card' ? '–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞' : 
                    account.type === 'credit' ? '–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞' : 
                    account.type === 'savings' ? '–°–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω—ã–π —Å—á–µ—Ç' : '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π —Å—á–µ—Ç';
                
                accountItem.innerHTML = `
                    <div class="account-settings-info">
                        <span class="account-settings-icon">${icon}</span>
                        <div class="account-settings-details">
                            <div class="account-settings-name">${account.name}</div>
                            <div class="account-settings-type">${accountTypeName}</div>
                        </div>
                    </div>
                    <div class="account-settings-balance">${account.balance.toFixed(2)} ${account.currency}</div>
                    <div class="account-settings-actions">
                        <button class="account-settings-btn edit edit-account" data-id="${account.id}" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                                <path d="M20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83zM3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25z"/>
                            </svg>
                            <span>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</span>
                        </button>
                    </div>
                `;
                
                accountsSettingsList.appendChild(accountItem);
            });
        }
        
        accountsList.appendChild(accountsSettingsList);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—á–µ—Ç–æ–≤
        updateTransferButtonVisibility();
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
        updateBalance();
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞
    function updateTransferButtonVisibility() {
        const transferButtonContainer = document.getElementById('transferButtonContainer');
        if (transferButtonContainer) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—á–µ—Ç–æ–≤ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ
            if (accounts.length > 1) {
                transferButtonContainer.style.display = 'block';
            } else {
                transferButtonContainer.style.display = 'none';
            }
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    function updateBalance() {
        const totalBalanceEl = document.getElementById('totalBalance');
        const accountsBalanceListEl = document.getElementById('accountsBalanceList');
        

        
        if (!totalBalanceEl || !accountsBalanceListEl) {
            return;
        }
        
        // –û–±—â–∏–π –±–∞–ª–∞–Ω—Å –≤—Å–µ—Ö —Å—á–µ—Ç–æ–≤
        const totalBalance = accounts.reduce((sum, account) => sum + account.balance, 0);
        totalBalanceEl.textContent = `${totalBalance.toFixed(2)} ‚ÇΩ`;
        
        // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–ª–∞—à–µ–∫ —Å—á–µ—Ç–æ–≤
        accountsBalanceListEl.innerHTML = '';
        
        // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—à–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—á–µ—Ç–∞

        accounts.forEach(account => {
            const accountBalanceItem = document.createElement('div');
            accountBalanceItem.className = 'account-balance-item';
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É –ª–æ–≥–æ—Ç–∏–ø–∞ –±–∞–Ω–∫–∞
            let icon = '';
            if (account.bank && account.bank !== '') {
                icon = `<div class="bank-logo ${account.bank}"></div>`;
            } else {
                // –ò–∫–æ–Ω–∫–∞ –¥–ª—è —Å—á–µ—Ç–∞ (–ø–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –Ω–∞–∑–≤–∞–Ω–∏—è)
                const firstLetter = account.name.charAt(0).toUpperCase();
                icon = `<div class="account-balance-icon">${firstLetter}</div>`;
            }
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞ –∏ —Ç–∏–ø —Å—á–µ—Ç–∞
            const bankName = account.bankName || '';
            const accountTypeName = account.type === 'cash' ? '–ù–∞–ª–∏—á–Ω—ã–µ' : 
                account.type === 'card' ? '–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞' : 
                account.type === 'credit' ? '–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞' : 
                account.type === 'savings' ? '–°–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω—ã–π —Å—á–µ—Ç' : '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π —Å—á–µ—Ç';
            
            accountBalanceItem.innerHTML = `
                <div class="account-balance-info">
                    ${icon}
                    <div class="account-balance-details">
                        <div style="font-size: 13px; color: #ffffff; font-weight: 500;">${bankName}</div>
                        <div style="font-size: 12px; color: rgba(255, 255, 255, 0.8); margin-top: 2px;">${accountTypeName}</div>
                    </div>
                </div>
                <div class="account-balance-amount">${account.balance.toFixed(2)} ‚ÇΩ</div>
            `;
            
            accountsBalanceListEl.appendChild(accountBalanceItem);
        });
        

    }

    // –†–µ–Ω–¥–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å—á–µ—Ç–∞–º–∏
    // –°–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏) –∏ –ø–æ ID (–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å–≤–µ—Ä—Ö—É)
    function renderTransactions() {
        const allTransactionsList = document.getElementById('allTransactions');
        
        if (!allTransactionsList) return;
        
        // –û—á–∏—Å—Ç–∫–∞
        allTransactionsList.innerHTML = '';
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –∏—Å–∫–ª—é—á–∞—è —Ç–µ, —á—Ç–æ —Å—Å—ã–ª–∞—é—Ç—Å—è –Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—á–µ—Ç–∞
        const validTransactions = transactions.filter(transaction => {
            const accountExists = accounts.find(a => a.id === transaction.accountId);
            return accountExists; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å—á–µ—Ç–∞–º–∏
        });
        
        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ –∏ ID (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞, –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å–≤–µ—Ä—Ö—É)
        const sortedTransactions = [...validTransactions].sort((a, b) => {
            // –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ –¥–∞—Ç—ã –ø–µ—Ä–≤—ã–º–∏)
            const dateComparison = new Date(b.date) - new Date(a.date);
            if (dateComparison !== 0) return dateComparison;
            
            // –ï—Å–ª–∏ –¥–∞—Ç—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ ID (–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–≤—ã–º–∏)
            // –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç, —á—Ç–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–∑–∂–µ –≤ —Ç–æ—Ç –∂–µ –¥–µ–Ω—å, –±—É–¥—É—Ç —Å–≤–µ—Ä—Ö—É
            return b.id - a.id;
        });
        
        // –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        sortedTransactions.forEach(transaction => {
            const transactionElement = createTransactionElement(transaction);
            allTransactionsList.appendChild(transactionElement);
        });
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        updateStats();
        
        // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        eventListenersSetup = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        setupEventListeners();
    }

    // –§—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–∫–ª—é—á–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å—á–µ—Ç–∞–º–∏
    // –°–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏) –∏ –ø–æ ID (–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å–≤–µ—Ä—Ö—É)
    function filterTransactions() {
        const filterType = document.getElementById('filterType')?.value || '';
        const filterAccount = document.getElementById('filterAccount')?.value || '';
        const filterCategory = document.getElementById('filterCategory')?.value || '';
        const filterDateFrom = document.getElementById('filterDateFrom')?.value || '';
        const filterDateTo = document.getElementById('filterDateTo')?.value || '';


        let filteredTransactions = transactions.filter(transaction => {
            // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É
            if (filterType && transaction.type !== filterType) return false;
            
            // –§–∏–ª—å—Ç—Ä –ø–æ —Å—á–µ—Ç—É (–ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—á–µ—Ç–∞)
            if (filterAccount) {
                if (transaction.accountId !== parseInt(filterAccount)) return false;
            } else {
                // –ï—Å–ª–∏ —Å—á–µ—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—á–µ—Ç
                const accountExists = accounts.find(a => a.id === transaction.accountId);
                if (!accountExists) return false; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å—á–µ—Ç–∞–º–∏
            }
            
            // –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if (filterCategory && transaction.category !== filterCategory) return false;
            
            // –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ (–æ—Ç)
            if (filterDateFrom && new Date(transaction.date) < new Date(filterDateFrom)) return false;
            
            // –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ (–¥–æ)
            if (filterDateTo && new Date(transaction.date) > new Date(filterDateTo)) return false;
            

            
            return true;
        });

        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ –∏ ID (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞, –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å–≤–µ—Ä—Ö—É)
        filteredTransactions.sort((a, b) => {
            // –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ –¥–∞—Ç—ã –ø–µ—Ä–≤—ã–º–∏)
            const dateComparison = new Date(b.date) - new Date(a.date);
            if (dateComparison !== 0) return dateComparison;
            
            // –ï—Å–ª–∏ –¥–∞—Ç—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ ID (–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–≤—ã–º–∏)
            // –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç, —á—Ç–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–∑–∂–µ –≤ —Ç–æ—Ç –∂–µ –¥–µ–Ω—å, –±—É–¥—É—Ç —Å–≤–µ—Ä—Ö—É
            return b.id - a.id;
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        const allTransactionsList = document.getElementById('allTransactions');
        if (allTransactionsList) {
            allTransactionsList.innerHTML = '';
            
            if (filteredTransactions.length === 0) {
                allTransactionsList.innerHTML = `
                    <div style="text-align: center; color: var(--text-secondary); padding: 40px 20px;">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="64" height="64" style="fill: var(--text-secondary); margin-bottom: 20px;">
                            <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8zm.31-8.86c-1.77-.45-2.34-.94-2.34-1.67 0-.84.79-1.43 2.1-1.43 1.38 0 1.9.66 1.94 1.64h1.71c-.05-1.34-.87-2.57-2.49-2.97V5H10.9v1.69c-1.51.32-2.72 1.3-2.72 2.81 0 1.79 1.49 2.69 3.66 3.21 1.95.46 2.34 1.15 2.34 1.87 0 .53-.39 1.39-2.1 1.39-1.6 0-2.23-.72-2.32-1.64H8.04c.1 1.7 1.36 2.66 2.86 2.97V19h2.34v-1.67c1.52-.29 2.72-1.16 2.73-2.77-.01-2.2-1.9-2.96-3.66-3.42z"/>
                        </svg>
                        <h3 style="margin-bottom: 10px; color: var(--text-primary);">–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                        <p style="margin-bottom: 20px;">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞</p>
                    </div>
                `;
                return;
            }
            
            filteredTransactions.forEach(transaction => {
                const transactionElement = createTransactionElement(transaction);
                allTransactionsList.appendChild(transactionElement);
            });
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Å—è—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        updateMonthlyStats();
    }

    // –§—É–Ω–∫—Ü–∏—è —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    function clearFilters() {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        const filterFields = ['filterType', 'filterAccount', 'filterCategory', 'filterDateFrom', 'filterDateTo'];
        filterFields.forEach(fieldId => {
            const field = document.getElementById(fieldId);
            if (field) {
                if (field.type === 'select-one') {
                    field.selectedIndex = 0;
                } else {
                    field.value = '';
                }
            }
        });
        
        // –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞
        const filtersContent = document.getElementById('filtersAccordionContent');
        const filtersToggle = document.querySelector('[data-accordion="filters"] .filters-toggle');
        
        if (filtersContent && filtersToggle) {
            filtersContent.classList.remove('expanded');
            filtersContent.classList.add('collapsed');
            filtersToggle.classList.remove('expanded');
            filtersToggle.querySelector('span').textContent = '–ü–æ–∫–∞–∑–∞—Ç—å';
            localStorage.setItem('filtersAccordionState', 'collapsed');
        }
        
        // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (—Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—á–µ—Ç–æ–≤)
        renderTransactions();
    }

    // –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    // –í —Ñ–∏–ª—å—Ç—Ä–µ –ø–æ —Å—á–µ—Ç–∞–º –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ (–Ω–µ —É–¥–∞–ª–µ–Ω–Ω—ã–µ) —Å—á–µ—Ç–∞
    function initFilters() {
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—á–µ—Ç–∞–º (—Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—á–µ—Ç–∞)
        const filterAccount = document.getElementById('filterAccount');
        if (filterAccount) {
            filterAccount.innerHTML = '<option value="">–í—Å–µ —Å—á–µ—Ç–∞</option>';
            // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—á–µ—Ç–∞
            const existingAccounts = accounts.filter(account => account && account.id);
            existingAccounts.forEach(account => {
                const option = document.createElement('option');
                option.value = account.id;
                option.textContent = account.name;
                filterAccount.appendChild(option);
            });
        }
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        const filterCategory = document.getElementById('filterCategory');
        if (filterCategory) {
            filterCategory.innerHTML = '<option value="">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>';
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
            categories.expense.forEach(category => {
                const option = document.createElement('option');
                option.value = category.id;
                option.textContent = category.name;
                filterCategory.appendChild(option);
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤
            categories.income.forEach(category => {
                const option = document.createElement('option');
                option.value = category.id;
                option.textContent = category.name;
                filterCategory.appendChild(option);
            });
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        const filterInputs = ['filterType', 'filterAccount', 'filterCategory', 'filterDateFrom', 'filterDateTo'];
        filterInputs.forEach(fieldId => {
            const field = document.getElementById(fieldId);
            if (field) {
                field.addEventListener('change', filterTransactions);
                field.addEventListener('input', filterTransactions);
            }
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        const clearFiltersBtn = document.getElementById('clearFiltersBtn');
        if (clearFiltersBtn) {
            clearFiltersBtn.addEventListener('click', clearFilters);
        }

        // –ê–∫–∫–æ—Ä–¥–µ–æ–Ω—ã —Ç–µ–ø–µ—Ä—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
    }








    // ========================================
    // –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê –ê–ö–ö–û–†–î–ï–û–ù–û–í
    // ========================================
    
    class AccordionManager {
        constructor() {
            this.accordions = new Map();
            this.init();
        }
        
        init() {
            this.findAccordions();
            this.setupEventListeners();
            this.loadStates();
        }
        
        findAccordions() {
            const headers = document.querySelectorAll('[data-accordion]');
            
            headers.forEach((header, index) => {
                const id = header.dataset.accordion;
                
                // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–æ—Å–æ–±
                let content = document.getElementById(id + 'AccordionContent');
                const toggle = header.querySelector('.accordion-toggle');
                
                // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π
                if (!content) {
                    content = header.parentElement.querySelector('.accordion-content');
                }
                
                if (!content || !toggle) {
                    return;
                }
                
                this.accordions.set(id, {
                    header,
                    content,
                    toggle,
                    isExpanded: false
                });
            });
        }
        
        setupEventListeners() {
            this.accordions.forEach((accordion, id) => {
                accordion.header.addEventListener('click', (e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    this.toggle(id);
                });
            });
        }
        
        loadStates() {
            this.accordions.forEach((accordion, id) => {
                const savedState = localStorage.getItem(`${id}AccordionState`);
                const shouldBeExpanded = savedState === 'expanded';
                
                // –î–ª—è main-accounts: –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if (id === 'main-accounts' && savedState === null) {
                    this.expand(id, false); // false = –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ localStorage
                } else if (shouldBeExpanded) {
                    this.expand(id, false); // false = –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ localStorage
                } else {
                    this.collapse(id, false); // false = –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ localStorage
                }
            });
        }
        
        toggle(id) {
            const accordion = this.accordions.get(id);
            if (!accordion) return;
            
            if (accordion.isExpanded) {
                this.collapse(id);
            } else {
                this.expand(id);
            }
        }
        
        expand(id, saveState = true) {
            const accordion = this.accordions.get(id);
            if (!accordion) return;
            
            accordion.content.classList.remove('collapsed');
            accordion.content.classList.add('expanded');
            accordion.toggle.classList.add('expanded');
            accordion.isExpanded = true;
            
            this.updateToggleText(id, true);
            
            if (saveState) {
                localStorage.setItem(`${id}AccordionState`, 'expanded');
            }
        }
        
        collapse(id, saveState = true) {
            const accordion = this.accordions.get(id);
            if (!accordion) return;
            
            accordion.content.classList.remove('expanded');
            accordion.content.classList.add('collapsed');
            accordion.toggle.classList.remove('expanded');
            accordion.isExpanded = false;
            
            this.updateToggleText(id, false);
            
            if (saveState) {
                localStorage.setItem(`${id}AccordionState`, 'collapsed');
            }
        }
        
        updateToggleText(id, isExpanded) {
            const accordion = this.accordions.get(id);
            if (!accordion) return;
            
            const span = accordion.toggle.querySelector('span');
            if (!span) return;
            
            const texts = {
                'main-accounts': { open: '–°–∫—Ä—ã—Ç—å', closed: '–ü–æ–∫–∞–∑–∞—Ç—å' },
                'filters': { open: '–°–∫—Ä—ã—Ç—å', closed: '–ü–æ–∫–∞–∑–∞—Ç—å' },
                'currency': { open: '–°–∫—Ä—ã—Ç—å', closed: '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å' },
                'accounts': { open: '–°–∫—Ä—ã—Ç—å', closed: '–£–ø—Ä–∞–≤–ª—è—Ç—å' },
                'categories': { open: '–°–∫—Ä—ã—Ç—å', closed: '–£–ø—Ä–∞–≤–ª—è—Ç—å' }
            };
            
            const textConfig = texts[id] || { open: '–°–∫—Ä—ã—Ç—å', closed: '–ü–æ–∫–∞–∑–∞—Ç—å' };
            span.textContent = isExpanded ? textConfig.open : textConfig.closed;
        }
        
        // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        open(id) {
            this.expand(id);
        }
        
        close(id) {
            this.collapse(id);
        }
        
        isOpen(id) {
            const accordion = this.accordions.get(id);
            return accordion ? accordion.isExpanded : false;
        }
    }
    
    // –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–æ–≤
    let accordionManager = null;
    
    // –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–æ–≤
    function initAccordions() {
        accordionManager = new AccordionManager();
    }
    
    // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–∞–º–∏
    function openAccordion(id) {
        if (accordionManager) {
            accordionManager.open(id);
        }
    }
    
    function closeAccordion(id) {
        if (accordionManager) {
            accordionManager.close(id);
        }
    }
    
    function toggleAccordion(id) {
        if (accordionManager) {
            accordionManager.toggle(id);
        }
    }
    
    function isAccordionOpen(id) {
        return accordionManager ? accordionManager.isOpen(id) : false;
    }
    



    // –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    // –í–∫–ª—é—á–∞–µ—Ç –¥–∞—Ç—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì
    function createTransactionElement(transaction) {
        const li = document.createElement('li');
        li.className = 'transaction-item';
        
        const category = categories[transaction.type].find(c => c.id === transaction.category);
        const account = accounts.find(a => a.id === transaction.accountId);
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–ª–∏, –µ—Å–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–≤—è–∑–∞–Ω–∞ —Å –Ω–µ–π
        let goalInfo = '';
        if (transaction.goalId && transaction.type === 'expense') {
            const goal = goals.find(g => g.id === parseInt(transaction.goalId));
            if (goal) {
                goalInfo = `<div class="transaction-goal">üéØ ${goal.name}</div>`;
            }
        }
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const transactionDate = new Date(transaction.date);
        const formattedDate = transactionDate.toLocaleDateString('ru-RU', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric'
        });
        
        li.innerHTML = `
            <div class="transaction-content">
                <div class="transaction-info">
                    <div class="transaction-title">${transaction.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}</div>
                    <div class="transaction-category">${category ? category.icon + ' ' + category.name : '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'} ‚Ä¢ ${account?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—á–µ—Ç'}</div>
                    <div class="transaction-date">üìÖ ${formattedDate}</div>
                    ${goalInfo}
                </div>
                <div class="transaction-amount ${transaction.type === 'income' ? 'income' : 'expense'}">
                    ${transaction.type === 'expense' ? '-' : '+'}${transaction.amount.toFixed(2)} ${account?.currency || 'RUB'}
                </div>
            </div>
            <button class="transaction-edit-icon" data-id="${transaction.id}" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                    <path d="M20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83zM3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25z"/>
                </svg>
            </button>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –ø—Ä—è–º–æ –∫ –∫–Ω–æ–ø–∫–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const editButton = li.querySelector('.transaction-edit-icon');
        if (editButton) {
            editButton.addEventListener('click', function(e) {
                e.stopPropagation();
                const transactionId = parseInt(this.dataset.id);
                editTransaction(transactionId);
            });
        }
        
        return li;
    }

    // –†–µ–Ω–¥–µ—Ä —Ü–µ–ª–µ–π
    function renderGoals() {
        const activeGoalsList = document.getElementById('activeGoalsList');
        const completedGoalsList = document.getElementById('completedGoalsList');
        const addGoalBtn = document.getElementById('addGoalBtn');
        
        if (!activeGoalsList || !completedGoalsList) return;
        
        // –û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–æ–≤
        activeGoalsList.innerHTML = '';
        completedGoalsList.innerHTML = '';
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ü–µ–ª–µ–π –∏ —Ä–∞–∑–¥–µ–ª—è–µ–º –∏—Ö
        const now = new Date();
        const activeGoals = [];
        const completedGoals = [];
        
        goals.forEach(goal => {
            const progress = (goal.current / goal.target) * 100;
            const deadline = new Date(goal.deadline);
            
            // –¶–µ–ª—å —Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π, –µ—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ 100% –∏–ª–∏ –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫
            if (progress >= 100 || deadline < now) {
                completedGoals.push(goal);
            } else {
                activeGoals.push(goal);
            }
        });
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∏–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å" —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –µ—Å—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–ª–∏
        if (addGoalBtn) {
            if (activeGoals.length > 0) {
                addGoalBtn.style.display = 'inline-flex';
            } else {
                addGoalBtn.style.display = 'none';
            }
        }
        
        // –†–µ–Ω–¥–µ—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π
        if (activeGoals.length > 0) {
            activeGoalsList.innerHTML = '';
            activeGoals.forEach(goal => {
                const goalElement = createGoalElement(goal, false);
                activeGoalsList.appendChild(goalElement);
            });
        }
        
        // –†–µ–Ω–¥–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π
        const clearCompletedGoalsBtn = document.getElementById('clearCompletedGoalsBtn');
        
        // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π
        completedGoalsList.innerHTML = '';
        
        if (completedGoals.length > 0) {
            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ü–µ–ª–∏
            completedGoals.forEach(goal => {
                const goalElement = createGoalElement(goal, true);
                completedGoalsList.appendChild(goalElement);
            });
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ü–µ–ª–∏
            if (clearCompletedGoalsBtn) {
                clearCompletedGoalsBtn.style.display = 'inline-flex';
            }
        } else {
            // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏, –µ—Å–ª–∏ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π
            if (clearCompletedGoalsBtn) {
                clearCompletedGoalsBtn.style.display = 'none';
            }
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤ —Ü–µ–ª–µ–π –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
        updateGoalsCounters();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω—É–∂–Ω—ã
        showPlaceholdersIfNeeded();
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∑–∞–≥–ª—É—à–µ–∫ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    function showPlaceholdersIfNeeded() {
        const activeGoalsList = document.getElementById('activeGoalsList');
        const completedGoalsList = document.getElementById('completedGoalsList');
        
        if (!activeGoalsList || !completedGoalsList) return;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ü–µ–ª–µ–π
        const activeGoals = goals.filter(goal => {
            const progress = (goal.current / goal.target) * 100;
            const deadline = new Date(goal.deadline);
            const now = new Date();
            return progress < 100 && deadline >= now;
        });
        
        const completedGoals = goals.filter(goal => {
            const progress = (goal.current / goal.target) * 100;
            const deadline = new Date(goal.deadline);
            const now = new Date();
            return progress >= 100 || deadline < now;
        });
        
        // –ï—Å–ª–∏ –Ω–µ—Ç —Ü–µ–ª–µ–π –≤–æ–æ–±—â–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª—è—Ö
        if (goals.length === 0 && activeGoalsList.children.length === 0) {
            activeGoalsList.innerHTML = `
                <div class="completed-goals-placeholder" style="background: linear-gradient(135deg, rgba(76, 175, 80, 0.05), rgba(76, 175, 80, 0.05)); border-color: rgba(76, 175, 80, 0.2);">
                    <h3>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ü–µ–ª–µ–π</h3>
                    <p>–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é —Ü–µ–ª—å –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</p>
                    <button class="btn btn-primary create-goal-btn" onclick="openGoalModal()">
                        –°–æ–∑–¥–∞—Ç—å —Ü–µ–ª—å +
                    </button>
                </div>
            `;
        }
        // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π, –Ω–æ –µ—Å—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª—è—Ö
        else if (activeGoals.length === 0 && goals.length > 0 && activeGoalsList.children.length === 0) {
            activeGoalsList.innerHTML = `
                <div class="completed-goals-placeholder" style="background: linear-gradient(135deg, rgba(76, 175, 80, 0.05), rgba(76, 175, 80, 0.05)); border-color: rgba(76, 175, 80, 0.2);">
                    <h3>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π</h3>
                    <p>–í—Å–µ –≤–∞—à–∏ —Ü–µ–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∏</p>
                    <button class="btn btn-primary create-goal-btn" onclick="openGoalModal()">
                        –°–æ–∑–¥–∞—Ç—å —Ü–µ–ª—å +
                    </button>
                </div>
            `;
        }
        
        // –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –≤ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ü–µ–ª—è—Ö
        if (completedGoals.length === 0 && completedGoalsList.children.length === 0) {
            // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ü–µ–ª–∏, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–°–æ–∑–¥–∞—Ç—å —Ü–µ–ª—å +"
            if (activeGoals.length > 0) {
                completedGoalsList.innerHTML = `
                    <div class="completed-goals-placeholder">
                        <h3>–ù–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π</h3>
                        <p>–ó–∞–≤–µ—Ä—à–∏—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é —Ü–µ–ª—å</p>
                    </div>
                `;
            } else {
                completedGoalsList.innerHTML = `
                    <div class="completed-goals-placeholder">
                        <h3>–ù–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π</h3>
                        <p>–ó–∞–≤–µ—Ä—à–∏—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é —Ü–µ–ª—å</p>
                        <button class="btn btn-primary create-goal-btn" onclick="openGoalModal()">
                            –°–æ–∑–¥–∞—Ç—å —Ü–µ–ª—å +
                        </button>
                    </div>
                `;
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π
        const addGoalBtn = document.getElementById('addGoalBtn');
        if (addGoalBtn) {
            if (activeGoals.length > 0) {
                addGoalBtn.style.display = 'inline-flex';
            } else {
                addGoalBtn.style.display = 'none';
            }
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π
    function clearCompletedGoals() {
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ü–µ–ª–∏? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
            // –§–∏–ª—å—Ç—Ä—É–µ–º —Ü–µ–ª–∏, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ
            goals = goals.filter(goal => {
                const progress = (goal.current / goal.target) * 100;
                const deadline = new Date(goal.deadline);
                const now = new Date();
                
                // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ —Ü–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã –∏ –Ω–µ –∏—Å—Ç–µ–∫–ª–∏
                return progress < 100 && deadline >= now;
            });
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π
            updateLocalStorage();
            
            // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏
            const clearCompletedGoalsBtn = document.getElementById('clearCompletedGoalsBtn');
            if (clearCompletedGoalsBtn) {
                clearCompletedGoalsBtn.style.display = 'none';
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É "–ù–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π"
            const completedGoalsList = document.getElementById('completedGoalsList');
            if (completedGoalsList) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ü–µ–ª–∏ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
                const activeGoalsAfterClear = goals.filter(goal => {
                    const progress = (goal.current / goal.target) * 100;
                    const deadline = new Date(goal.deadline);
                    const now = new Date();
                    return progress < 100 && deadline >= now;
                });
                
                // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ü–µ–ª–∏, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–°–æ–∑–¥–∞—Ç—å —Ü–µ–ª—å +"
                if (activeGoalsAfterClear.length > 0) {
                    completedGoalsList.innerHTML = `
                        <div class="completed-goals-placeholder">
                            <h3>–ù–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π</h3>
                            <p>–ó–∞–≤–µ—Ä—à–∏—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é —Ü–µ–ª—å</p>
                        </div>
                    `;
                } else {
                    completedGoalsList.innerHTML = `
                        <div class="completed-goals-placeholder">
                            <h3>–ù–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π</h3>
                            <p>–ó–∞–≤–µ—Ä—à–∏—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é —Ü–µ–ª—å</p>
                            <button class="btn btn-primary create-goal-btn" onclick="openGoalModal()">
                                –°–æ–∑–¥–∞—Ç—å —Ü–µ–ª—å +
                            </button>
                        </div>
                    `;
                }
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –Ω–∞ –¥–∞—à–±–æ—Ä–¥–µ
            updateDashboard();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            showPlaceholdersIfNeeded();
            
            console.log('–í—Å–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ü–µ–ª–∏ —É–¥–∞–ª–µ–Ω—ã');
        }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Ü–µ–ª–∏
    function createGoalElement(goal, isCompleted) {
        const progress = (goal.current / goal.target) * 100;
        const goalCard = document.createElement('div');
        goalCard.className = 'goal-card';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π
        if (isCompleted) {
            goalCard.classList.add('completed-goal');
        }
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        const deadline = new Date(goal.deadline);
        const deadlineFormatted = deadline.toLocaleDateString('ru-RU', {
            day: 'numeric',
            month: 'long',
            year: 'numeric'
        });
        
        goalCard.innerHTML = `
            <div class="goal-header">
                <h3 class="goal-title">${goal.name}</h3>
                <span class="goal-status ${isCompleted ? 'completed' : 'active'}">
                    ${isCompleted ? '–ó–∞–≤–µ—Ä—à–µ–Ω–æ' : '–ê–∫—Ç–∏–≤–Ω–æ'}
                </span>
            </div>
            
            <div class="goal-stats">
                <div class="goal-stat-item">
                    <span class="goal-stat-value">${goal.current.toFixed(2)}</span>
                    <span class="goal-stat-label">–ù–∞–∫–æ–ø–ª–µ–Ω–æ (‚ÇΩ)</span>
                </div>
                <div class="goal-stat-item">
                    <span class="goal-stat-value">${goal.target.toFixed(2)}</span>
                    <span class="goal-stat-label">–¶–µ–ª—å (‚ÇΩ)</span>
                </div>
            </div>
            
            <div class="goal-progress">
                <div class="goal-progress-header">
                    <span class="goal-progress-percentage">${progress.toFixed(0)}%</span>
                    <span class="goal-progress-deadline">
                        ${isCompleted ? '–ó–∞–≤–µ—Ä—à–µ–Ω–æ' : `–î–æ ${deadlineFormatted}`}
                    </span>
                </div>
                <div class="goal-progress-bar">
                    <div class="progress-bar" style="width: ${progress}%; ${isCompleted ? 'background: linear-gradient(90deg, #22c55e, #16a34a);' : ''}"></div>
                </div>
            </div>
            
            <div class="goal-actions">
                ${!isCompleted && progress < 100 ? `
                    <button class="btn btn-primary btn-sm pay-goal" data-id="${goal.id}" data-target="${goal.target}" data-current="${goal.current}" title="–û–ø–ª–∞—Ç–∏—Ç—å —Å –±–∞–ª–∞–Ω—Å–∞">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="16" height="16">
                            <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
                        </svg>
                        –û–ø–ª–∞—Ç–∏—Ç—å
                    </button>
                ` : ''}
                <button class="btn btn-outline btn-sm edit-goal" data-id="${goal.id}" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="16" height="16">
                        <path d="M20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83zM3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25z"/>
                    </svg>
                    –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                </button>
            </div>
        `;
        
        return goalCard;
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    function updateStats() {
        const now = new Date();
        const currentMonth = now.getMonth();
        const currentYear = now.getFullYear();
        
        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
        const monthTransactions = transactions.filter(transaction => {
            const transactionDate = new Date(transaction.date);
            return transactionDate.getMonth() === currentMonth && 
                   transactionDate.getFullYear() === currentYear;
        });
        
        // –†–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
        const monthExpenses = monthTransactions
            .filter(t => t.type === 'expense')
            .reduce((sum, t) => sum + t.amount, 0);
            
        const monthIncome = monthTransactions
            .filter(t => t.type === 'income')
            .reduce((sum, t) => sum + t.amount, 0);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ DOM –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
        const monthExpensesEl = document.getElementById('monthExpenses');
        const monthIncomeEl = document.getElementById('monthIncome');
        
        if (monthExpensesEl) monthExpensesEl.textContent = `${monthExpenses.toFixed(2)} ‚ÇΩ`;
        if (monthIncomeEl) monthIncomeEl.textContent = `${monthIncome.toFixed(2)} ‚ÇΩ`;
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤ —Ü–µ–ª–µ–π
        updateGoalsCounters();
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤ —Ü–µ–ª–µ–π
    function updateGoalsCounters() {
        const now = new Date();
        const activeGoals = [];
        const completedGoals = [];
        
        goals.forEach(goal => {
            const progress = (goal.current / goal.target) * 100;
            const deadline = new Date(goal.deadline);
            
            // –¶–µ–ª—å —Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π, –µ—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ 100% –∏–ª–∏ –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫
            if (progress >= 100 || deadline < now) {
                completedGoals.push(goal);
            } else {
                activeGoals.push(goal);
            }
        });
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ DOM
        const activeGoalsCountEl = document.getElementById('activeGoalsCount');
        const completedGoalsCountEl = document.getElementById('completedGoalsCount');
        
        if (activeGoalsCountEl) {
            activeGoalsCountEl.textContent = activeGoals.length;
        }
        
        if (completedGoalsCountEl) {
            completedGoalsCountEl.textContent = completedGoals.length;
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
    function initCharts() {
        // –ì—Ä–∞—Ñ–∏–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤
        const categoryCanvas = document.getElementById('categoryChart');
        if (categoryCanvas) {
            const categoryCtx = categoryCanvas.getContext('2d');
            updateCategoryChart(categoryCtx);
        }
        
        // –ì—Ä–∞—Ñ–∏–∫ –¥–æ—Ö–æ–¥–æ–≤/—Ä–∞—Å—Ö–æ–¥–æ–≤
        const incomeExpenseCanvas = document.getElementById('incomeExpenseChart');
        if (incomeExpenseCanvas) {
            const incomeExpenseCtx = incomeExpenseCanvas.getContext('2d');
            updateIncomeExpenseChart(incomeExpenseCtx);
        }
        
        // –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–ª–µ–π
        const goalsCanvas = document.getElementById('goalsChart');
        if (goalsCanvas) {
            const goalsCtx = goalsCanvas.getContext('2d');
            updateGoalsChart(goalsCtx);
        }
        

    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    function updateCategoryChart(ctx, chartType = 'doughnut') {
        const now = new Date();
        const currentMonth = now.getMonth();
        const currentYear = now.getFullYear();
        
        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
        const monthExpenses = transactions.filter(transaction => {
            const transactionDate = new Date(transaction.date);
            return transaction.type === 'expense' &&
                   transactionDate.getMonth() === currentMonth && 
                   transactionDate.getFullYear() === currentYear;
        });
        
        // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        const expensesByCategory = {};
        monthExpenses.forEach(expense => {
            if (!expensesByCategory[expense.category]) {
                expensesByCategory[expense.category] = 0;
            }
            expensesByCategory[expense.category] += expense.amount;
        });
        
        // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        const labels = [];
        const data = [];
        const backgroundColors = [
            '#4361ee', '#3a0ca3', '#4cc9f0', '#f72585', '#fca311', '#4895ef', '#7209b7',
            '#06d6a0', '#118ab2', '#ef476f', '#ffd166', '#073b4c', '#5e60ce', '#5a189a'
        ];
        
        Object.keys(expensesByCategory).forEach((categoryId, index) => {
            const category = categories.expense.find(c => c.id === categoryId);
            if (category) {
                labels.push(category.name);
                data.push(expensesByCategory[categoryId]);
            }
        });
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
        if (charts.categoryChart) {
            charts.categoryChart.destroy();
        }
        
        charts.categoryChart = new Chart(ctx, {
            type: chartType,
            data: {
                labels: labels,
                datasets: [{
                    data: data,
                    backgroundColor: backgroundColors,
                    borderWidth: chartType === 'bar' ? 1 : 0,
                    borderColor: chartType === 'bar' ? 'rgba(0,0,0,0.1)' : undefined
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: chartType === 'bar' ? 'top' : 'right',
                        labels: {
                            font: {
                                family: 'Inter'
                            },
                            color: getComputedStyle(document.body).getPropertyValue('--text-primary')
                        }
                    },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                return `${context.label}: ${context.raw.toFixed(2)} ‚ÇΩ`;
                            }
                        }
                    }
                },
                animation: {
                    animateScale: true,
                    animateRotate: true
                }
            }
        });
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–æ—Ö–æ–¥–æ–≤/—Ä–∞—Å—Ö–æ–¥–æ–≤
    function updateIncomeExpenseChart(ctx, chartType = 'bar') {
        const now = new Date();
        const months = [];
        const incomeData = [];
        const expensesData = [];
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤
        for (let i = 5; i >= 0; i--) {
            const month = new Date(now.getFullYear(), now.getMonth() - i, 1);
            const monthName = month.toLocaleString('ru', { month: 'short' });
            months.push(monthName);
            
            const monthStart = new Date(month.getFullYear(), month.getMonth(), 1);
            const monthEnd = new Date(month.getFullYear(), month.getMonth() + 1, 0);
            
            const monthTransactions = transactions.filter(transaction => {
                const transactionDate = new Date(transaction.date);
                return transactionDate >= monthStart && transactionDate <= monthEnd;
            });
            
            const income = monthTransactions
                .filter(t => t.type === 'income')
                .reduce((sum, t) => sum + t.amount, 0);
                
            const expenses = monthTransactions
                .filter(t => t.type === 'expense')
                .reduce((sum, t) => sum + t.amount, 0);
            
            incomeData.push(income);
            expensesData.push(expenses);
        }
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
        if (charts.incomeExpenseChart) {
            charts.incomeExpenseChart.destroy();
        }
        
        const datasets = [
            {
                label: '–î–æ—Ö–æ–¥—ã',
                data: incomeData,
                backgroundColor: '#4cc9f0',
                borderWidth: chartType === 'line' ? 2 : 0,
                borderColor: chartType === 'line' ? '#4cc9f0' : undefined,
                borderRadius: chartType === 'bar' ? 4 : undefined,
                fill: chartType === 'line' ? false : undefined,
                tension: chartType === 'line' ? 0.4 : undefined
            },
            {
                label: '–†–∞—Å—Ö–æ–¥—ã',
                data: expensesData,
                backgroundColor: '#f72585',
                borderWidth: chartType === 'line' ? 2 : 0,
                borderColor: chartType === 'line' ? '#f72585' : undefined,
                borderRadius: chartType === 'bar' ? 4 : undefined,
                fill: chartType === 'line' ? false : undefined,
                tension: chartType === 'line' ? 0.4 : undefined
            }
        ];
        
        charts.incomeExpenseChart = new Chart(ctx, {
            type: chartType,
            data: {
                labels: months,
                datasets: datasets
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: chartType === 'radar' ? undefined : {
                    x: {
                        grid: {
                            display: false
                        },
                        ticks: {
                            color: getComputedStyle(document.body).getPropertyValue('--text-secondary')
                        }
                    },
                    y: {
                        grid: {
                            color: 'rgba(0, 0, 0, 0.05)'
                        },
                        ticks: {
                            color: getComputedStyle(document.body).getPropertyValue('--text-secondary'),
                            callback: function(value) {
                                return value + ' ‚ÇΩ';
                            }
                        }
                    }
                },
                plugins: {
                    legend: {
                        position: 'top',
                        labels: {
                            font: {
                                family: 'Inter'
                            },
                            color: getComputedStyle(document.body).getPropertyValue('--text-primary')
                        }
                    },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                return `${context.dataset.label}: ${context.raw.toFixed(2)} ‚ÇΩ`;
                            }
                        }
                    }
                },
                animation: {
                    duration: 1000,
                    easing: 'easeOutQuart'
                }
            }
        });
    }



    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ü–µ–ª–µ–π
    function updateGoalsChart(ctx, chartType = 'bar') {
        const labels = goals.map(goal => goal.name);
        const targetData = goals.map(goal => goal.target);
        const currentData = goals.map(goal => goal.current);
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
        if (charts.goalsChart) {
            charts.goalsChart.destroy();
        }
        
        const datasets = [
            {
                label: '–¶–µ–ª–µ–≤–∞—è —Å—É–º–º–∞',
                data: targetData,
                backgroundColor: chartType === 'doughnut' ? 'rgba(67,97, 238, 0.2)' : 'rgba(67,97, 238, 0.2)',
                borderColor: chartType === 'doughnut' ? '#4361ee' : '#4361ee',
                borderWidth: chartType === 'doughnut' ? 2 : 1,
                borderRadius: chartType === 'bar' ? 4 : undefined,
                fill: chartType === 'line' ? false : undefined,
                tension: chartType === 'line' ? 0.4 : undefined
            },
            {
                label: '–¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å',
                data: currentData,
                backgroundColor: chartType === 'doughnut' ? '#4cc9f0' : '#4cc9f0',
                borderWidth: chartType === 'doughnut' ? 2 : 0,
                borderRadius: chartType === 'bar' ? 4 : undefined,
                fill: chartType === 'line' ? false : undefined,
                tension: chartType === 'line' ? 0.4 : undefined
            }
        ];
        
        charts.goalsChart = new Chart(ctx, {
            type: chartType,
            data: {
                labels: labels,
                datasets: chartType === 'doughnut' ? [{
                    label: '–¶–µ–ª–∏',
                    data: currentData,
                    backgroundColor: ['#4361ee', '#4cc9f0', '#f72585', '#fca311', '#7209b7'],
                    borderWidth: 2,
                    borderColor: '#ffffff'
                }] : datasets
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: chartType === 'doughnut' ? undefined : {
                    x: {
                        grid: {
                            display: false
                        },
                        ticks: {
                            color: getComputedStyle(document.body).getPropertyValue('--text-secondary')
                        }
                    },
                    y: {
                        grid: {
                            color: 'rgba(0, 0, 0, 0.05)'
                        },
                        ticks: {
                            color: getComputedStyle(document.body).getPropertyValue('--text-secondary'),
                            callback: function(value) {
                                return value + ' ‚ÇΩ';
                            }
                        }
                    }
                },
                plugins: {
                    legend: {
                        position: chartType === 'doughnut' ? 'right' : 'top',
                        labels: {
                            font: {
                                family: 'Inter'
                            },
                            color: getComputedStyle(document.body).getPropertyValue('--text-primary')
                        }
                    },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                return `${context.label}: ${context.raw.toFixed(2)} ‚ÇΩ`;
                            }
                        }
                    }
                },
                animation: {
                    duration: 1000,
                    easing: 'easeOutQuart'
                }
            }
        });
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Å—è—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å —Ä–∞—Å—á–µ—Ç–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π
    function updateMonthlyStats() {
        const currentDate = new Date();
        const currentMonth = currentDate.getMonth();
        const currentYear = currentDate.getFullYear();
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
        const previousMonth = currentMonth === 0 ? 11 : currentMonth - 1;
        const previousYear = currentMonth === 0 ? currentYear - 1 : currentYear;
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
        const monthlyTransactions = transactions.filter(transaction => {
            const transactionDate = new Date(transaction.date);
            return transactionDate.getMonth() === currentMonth && 
                   transactionDate.getFullYear() === currentYear;
        });
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü
        const previousMonthTransactions = transactions.filter(transaction => {
            const transactionDate = new Date(transaction.date);
            return transactionDate.getMonth() === previousMonth && 
                   transactionDate.getFullYear() === previousYear;
        });
        
        // –°—á–∏—Ç–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã –∏ –¥–æ—Ö–æ–¥—ã –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
        let monthlyExpenses = 0;
        let monthlyIncome = 0;
        
        monthlyTransactions.forEach(transaction => {
            if (transaction.type === 'expense') {
                monthlyExpenses += transaction.amount;
            } else if (transaction.type === 'income') {
                monthlyIncome += transaction.amount;
            }
        });
        
        // –°—á–∏—Ç–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã –∏ –¥–æ—Ö–æ–¥—ã –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü
        let previousMonthExpenses = 0;
        let previousMonthIncome = 0;
        
        previousMonthTransactions.forEach(transaction => {
            if (transaction.type === 'expense') {
                previousMonthExpenses += transaction.amount;
            } else if (transaction.type === 'income') {
                previousMonthIncome += transaction.amount;
            }
        });
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        const expenseChange = previousMonthExpenses > 0 ? 
            ((monthlyExpenses - previousMonthExpenses) / previousMonthExpenses) * 100 : 0;
        const incomeChange = previousMonthIncome > 0 ? 
            ((monthlyIncome - previousMonthIncome) / previousMonthIncome) * 100 : 0;
        

        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—É–º–º
        const monthlyExpensesElement = document.getElementById('monthlyExpenses');
        const monthlyIncomeElement = document.getElementById('monthlyIncome');
        
        if (monthlyExpensesElement) {
            monthlyExpensesElement.textContent = `${monthlyExpenses.toFixed(2)} ‚ÇΩ`;
        }
        
        if (monthlyIncomeElement) {
            monthlyIncomeElement.textContent = `${monthlyIncome.toFixed(2)} ‚ÇΩ`;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        const expenseChangeElement = document.getElementById('expenseChange');
        const incomeChangeElement = document.getElementById('incomeChange');
        
        if (expenseChangeElement) {
            if (expenseChange > 0) {
                // –ë–æ–ª—å—à–µ —Ç—Ä–∞—Ç = –∫—Ä–∞—Å–Ω—ã–π
                expenseChangeElement.textContent = `+${expenseChange.toFixed(1)}%`;
                expenseChangeElement.className = 'stat-square expense-square';

            } else if (expenseChange < 0) {
                // –ú–µ–Ω—å—à–µ —Ç—Ä–∞—Ç = –∑–µ–ª–µ–Ω—ã–π
                expenseChangeElement.textContent = `${expenseChange.toFixed(1)}%`;
                expenseChangeElement.className = 'stat-square income-square';

            } else {
                expenseChangeElement.textContent = '0%';
                expenseChangeElement.className = 'stat-square expense-square';

            }
        }
        
        if (incomeChangeElement) {
            if (incomeChange > 0) {
                // –ë–æ–ª—å—à–µ –¥–æ—Ö–æ–¥–æ–≤ = –∑–µ–ª–µ–Ω—ã–π
                incomeChangeElement.textContent = `+${incomeChange.toFixed(1)}%`;
                incomeChangeElement.className = 'stat-square income-square';

            } else if (incomeChange < 0) {
                // –ú–µ–Ω—å—à–µ –¥–æ—Ö–æ–¥–æ–≤ = –∫—Ä–∞—Å–Ω—ã–π
                incomeChangeElement.textContent = `${incomeChange.toFixed(1)}%`;
                incomeChangeElement.className = 'stat-square expense-square';

            } else {
                incomeChangeElement.textContent = '0%';
                incomeChangeElement.className = 'stat-square income-square';

            }
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞
    function updateDashboard() {
        updateBalance();
        updateStats();
        updateMonthlyStats();
        renderTransactions();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        const categoryCanvas = document.getElementById('categoryChart');
        if (categoryCanvas) {
            updateCategoryChart(categoryCanvas.getContext('2d'));
        }
        
        const incomeExpenseCanvas = document.getElementById('incomeExpenseChart');
        if (incomeExpenseCanvas) {
            updateIncomeExpenseChart(incomeExpenseCanvas.getContext('2d'));
        }
        
        const goalsCanvas = document.getElementById('goalsChart');
        if (goalsCanvas) {
            updateGoalsChart(goalsCanvas.getContext('2d'));
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        showPlaceholdersIfNeeded();
    }

    // –§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∏–ø–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    function updateChartType(chartName, chartType) {
        // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º —Å—Ç–∞—Ä—ã–π –≥—Ä–∞—Ñ–∏–∫
        if (charts[chartName + 'Chart']) {
            charts[chartName + 'Chart'].destroy();
            charts[chartName + 'Chart'] = null;
        }
        
        // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å –Ω–æ–≤—ã–º —Ç–∏–ø–æ–º
        const canvas = document.getElementById(chartName + 'Chart');
        if (canvas) {
            const ctx = canvas.getContext('2d');
            
            switch (chartName) {
                case 'category':
                    updateCategoryChart(ctx, chartType);
                    break;
                case 'incomeExpense':
                    updateIncomeExpenseChart(ctx, chartType);
                    break;
                case 'goals':
                    updateGoalsChart(ctx, chartType);
                    break;
            }
        }
    }

    // –§–ª–∞–≥–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
    let eventListenersSetup = false;
    let currencySettingsLoaded = false;
    let categoriesSettingsLoaded = false;

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    function setupEventListeners() {
        // –ï—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö —Å–Ω–æ–≤–∞
        if (eventListenersSetup) {
            return;
        }
        eventListenersSetup = true;
        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
        const themeCheckbox = document.getElementById('themeCheckbox');
        if (themeCheckbox) {
            themeCheckbox.addEventListener('change', function() {
                document.body.classList.toggle('dark-mode', this.checked);
                localStorage.setItem('darkMode', this.checked);
                
                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç–µ–º—ã
                Object.values(charts).forEach(chart => chart.update());
            });

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Ç–µ–º—ã
            if (localStorage.getItem('darkMode') === 'true') {
                themeCheckbox.checked = true;
                document.body.classList.add('dark-mode');
            }
        }





        // –ê–∫–∫–æ—Ä–¥–µ–æ–Ω—ã —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –Ω–æ–≤–æ–π –ø—Ä–æ—Å—Ç–æ–π —Å–∏—Å—Ç–µ–º–æ–π –≤ initSimpleAccordions()

        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
        document.querySelectorAll('.tab-item').forEach(item => {
            item.addEventListener('click', function() {
                // –£–±—Ä–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫
                document.querySelectorAll('.tab-item').forEach(i => i.classList.remove('active'));
                document.querySelectorAll('.tab-content').forEach(t => {
                    t.classList.remove('active');
                    t.classList.remove('fade-in');
                });
                
                // –î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–µ
                this.classList.add('active');
                const tabId = this.dataset.tab + '-tab';
                const tabElement = document.getElementById(tabId);
                if (tabElement) {
                    tabElement.classList.add('active');
                    // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—è–≤–ª–µ–Ω–∏—è
                    setTimeout(() => {
                        tabElement.classList.add('fade-in');
                    }, 50);
                }
                
                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–±–∞
                updateTabIndicator(this);
                
                // –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –∞–∫—Ç–∏–≤–Ω–æ–º—É —Ç–∞–±—É
                const tabsScroll = document.querySelector('.tabs-scroll');
                if (tabsScroll) {
                    const activeTab = this;
                    const scrollLeft = activeTab.offsetLeft - (tabsScroll.offsetWidth / 2) + (activeTab.offsetWidth / 2);
                    tabsScroll.scrollTo({
                        left: scrollLeft,
                        behavior: 'smooth'
                    });
                }
            });
        });



        // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ —Ç–∞–±–æ–≤
        const tabsPrevBtn = document.getElementById('tabsPrevBtn');
        const tabsNextBtn = document.getElementById('tabsNextBtn');
        const tabsScroll = document.querySelector('.tabs-scroll');

        if (tabsPrevBtn && tabsNextBtn && tabsScroll) {
            // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–ª–µ–≤–æ
            tabsPrevBtn.addEventListener('click', () => {
                tabsScroll.scrollBy({
                    left: -200,
                    behavior: 'smooth'
                });
            });

            // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–ø—Ä–∞–≤–æ
            tabsNextBtn.addEventListener('click', () => {
                tabsScroll.scrollBy({
                    left: 200,
                    behavior: 'smooth'
                });
            });

            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            function updateNavButtons() {
                const isAtStart = tabsScroll.scrollLeft <= 0;
                const isAtEnd = tabsScroll.scrollLeft >= tabsScroll.scrollWidth - tabsScroll.offsetWidth;
                
                tabsPrevBtn.style.display = isAtStart ? 'none' : 'flex';
                tabsNextBtn.style.display = isAtEnd ? 'none' : 'flex';
            }

            // –°–ª—É—à–∞—Ç–µ–ª—å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
            tabsScroll.addEventListener('scroll', updateNavButtons);
            
            // –ù–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            updateNavButtons();
        }



        // –°–≤–∏—á –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
        const currencyToggleSwitch = document.getElementById('currencyToggleSwitch');
        if (currencyToggleSwitch) {
            currencyToggleSwitch.addEventListener('change', function() {
                const settingsContent = document.getElementById('currencySettingsContent');
                if (this.checked) {
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞–ª—é—Ç
                    settingsContent.style.display = 'block';
                    setTimeout(() => {
                        settingsContent.classList.add('show');
                    }, 10);
                    localStorage.setItem('currencyToggleState', 'true');
                } else {
                    // –°–∫—Ä—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞–ª—é—Ç
                    settingsContent.classList.remove('show');
                    setTimeout(() => {
                        settingsContent.style.display = 'none';
                    }, 300);
                    localStorage.setItem('currencyToggleState', 'false');
                    
                    // –°–∫—Ä—ã–≤–∞–µ–º –±–ª–æ–∫ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                    const currencyContainer = document.getElementById('currencyRatesInline');
                    if (currencyContainer) {
                        currencyContainer.style.display = 'none';
                    }
                }
            });
        }



        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —á–µ–∫–±–æ–∫—Å–æ–≤ –≤–∞–ª—é—Ç
        document.addEventListener('change', function(e) {
            if (e.target.matches('.currency-checkboxes input[type="checkbox"]')) {
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —á–µ–∫–±–æ–∫—Å–∞
                setTimeout(() => {
                    saveCurrencySettings();
                }, 100);
            }
        });







        // –í—ã–±–æ—Ä —Å—á–µ—Ç–∞ - –æ—Ç–∫–ª—é—á–µ–Ω–æ, —Ç–µ–ø–µ—Ä—å —Å—á–µ—Ç–∞ –≤—ã–±–∏—Ä–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö
        // document.addEventListener('click', function(e) {
        //     if (e.target.closest('.account-item')) {
        //         const accountItem = e.target.closest('.account-item');
        //         const accountId = parseInt(accountItem.dataset.id);
        //         
        //         // –û–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Å—á–µ—Ç
        //         document.querySelectorAll('.account-item').forEach(item => {
        //             item.classList.remove('active');
        //         });
        //         accountItem.classList.add('active');
        //         
        //         currentAccountId = accountId;
        //         updateDashboard();
        //     }
        // });

        // –ö–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        const addExpenseBtn = document.getElementById('addExpenseBtn');
        const addIncomeBtn = document.getElementById('addIncomeBtn');
        const addGoalBtn = document.getElementById('addGoalBtn');
        const addAccountBtn = document.getElementById('addAccountBtn');
        
        if (addExpenseBtn) addExpenseBtn.addEventListener('click', openExpenseModal);
        if (addIncomeBtn) addIncomeBtn.addEventListener('click', openIncomeModal);
        if (addGoalBtn) addGoalBtn.addEventListener('click', openGoalModal);
        if (addAccountBtn) addAccountBtn.addEventListener('click', openAccountModal);

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
        document.querySelectorAll('.close-modal').forEach(btn => {
            btn.addEventListener('click', closeAllModals);
        });

        // –ö–ª–∏–∫ –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        document.querySelectorAll('.modal').forEach(modal => {
            modal.addEventListener('click', function(e) {
                if (e.target === this) {
                    closeAllModals();
                }
            });
        });

        // –§–æ—Ä–º—ã
        const transactionForm = document.getElementById('transactionForm');
        const goalForm = document.getElementById('goalForm');
        const accountForm = document.getElementById('accountForm');
        const incomeForm = document.getElementById('incomeForm');
        const expenseForm = document.getElementById('expenseForm');
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö
        if (transactionForm) {
            transactionForm.removeEventListener('submit', handleTransactionSubmit);
            transactionForm.addEventListener('submit', handleTransactionSubmit);
        }
        if (goalForm) {
            goalForm.removeEventListener('submit', handleGoalSubmit);
            goalForm.addEventListener('submit', handleGoalSubmit);
        }
        if (accountForm) {
            accountForm.removeEventListener('submit', handleAccountSubmit);
            accountForm.addEventListener('submit', handleAccountSubmit);
        }
        if (incomeForm) {
            // –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            const newIncomeForm = incomeForm.cloneNode(true);
            incomeForm.parentNode.replaceChild(newIncomeForm, incomeForm);
            
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            incomeSubmitHandler = (e) => { e.preventDefault(); handleIncomeSubmit(); };
            newIncomeForm.addEventListener('submit', incomeSubmitHandler);
        }
        if (expenseForm) {
            // –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            const newExpenseForm = expenseForm.cloneNode(true);
            expenseForm.parentNode.replaceChild(newExpenseForm, expenseForm);
            
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            expenseSubmitHandler = (e) => { e.preventDefault(); handleExpenseSubmit(); };
            newExpenseForm.addEventListener('submit', expenseSubmitHandler);
        }

        // –§–æ—Ä–º–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        const categoryForm = document.getElementById('categoryForm');
        if (categoryForm) {
            categoryForm.removeEventListener('submit', handleCategorySubmit);
            categoryForm.addEventListener('submit', handleCategorySubmit);
        }

        // –§–æ—Ä–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
        const transferForm = document.getElementById('transferForm');
        if (transferForm) {
            transferForm.removeEventListener('submit', handleTransferSubmit);
            transferForm.addEventListener('submit', handleTransferSubmit);
        }

        // –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
        const deleteCategoryBtn = document.getElementById('deleteCategoryBtn');
        if (deleteCategoryBtn) {
            deleteCategoryBtn.addEventListener('click', function() {
                const categoryId = document.getElementById('categoryId').value;
                const categoryTypeSelect = document.getElementById('categoryTypeSelect');
                const categoryType = categoryTypeSelect ? categoryTypeSelect.value : document.getElementById('categoryType').value;
                if (categoryId && categoryType) {
                    deleteCategory(categoryId, categoryType);
                    closeAllModals();
                }
            });
        }

        // –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—á–µ—Ç–∞ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
        const deleteAccountBtn = document.getElementById('deleteAccountBtn');
        if (deleteAccountBtn) {
            deleteAccountBtn.addEventListener('click', function() {
                const accountId = document.getElementById('accountId').value;
                if (accountId) {
                    // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —É–¥–∞–ª–µ–Ω–∏—è
                    deleteAccount(parseInt(accountId));
                    
                    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                    setTimeout(() => {
                        renderAccounts();
                        renderTransactions();
                        updateDashboard();
                        closeAllModals();
                    }, 100);
                }
            });
        }

        // –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ü–µ–ª–∏ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
        const deleteGoalBtn = document.getElementById('deleteGoalBtn');
        if (deleteGoalBtn) {
            deleteGoalBtn.addEventListener('click', function() {
                const goalId = document.getElementById('goalId').value;
                if (goalId) {
                    deleteGoal(parseInt(goalId));
                    closeAllModals();
                }
            });
        }

        // –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π
        const clearCompletedGoalsBtn = document.getElementById('clearCompletedGoalsBtn');
        if (clearCompletedGoalsBtn) {
            clearCompletedGoalsBtn.addEventListener('click', clearCompletedGoals);
        }



        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –æ–ø–ª–∞—Ç—ã —Ü–µ–ª–∏
        const confirmPaymentBtn = document.getElementById('confirmPaymentBtn');
        if (confirmPaymentBtn) {
            confirmPaymentBtn.addEventListener('click', confirmGoalPayment);
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫-–ø–æ–¥—Å–∫–∞–∑–æ–∫ —Å—É–º–º
        document.addEventListener('click', function(e) {
            if (e.target.classList.contains('payment-hint-btn')) {
                const amount = parseFloat(e.target.dataset.amount);
                const paymentAmount = document.getElementById('paymentAmount');
                if (paymentAmount) {
                    paymentAmount.value = amount;
                }
            }
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å –æ—Å—Ç–∞—Ç–∫–æ–º
            if (e.target.closest('.payment-hint-remaining')) {
                const remainingAmountBtn = e.target.closest('.payment-hint-remaining');
                const remainingAmountValue = remainingAmountBtn.querySelector('.remaining-amount-value');
                if (remainingAmountValue) {
                    const amountText = remainingAmountValue.textContent;
                    const amount = parseFloat(amountText.replace(/[^\d.-]/g, ''));
                    const paymentAmount = document.getElementById('paymentAmount');
                    if (paymentAmount && !isNaN(amount)) {
                        paymentAmount.value = amount;
                    }
                }
            }

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏ –∏–∫–æ–Ω–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            if (e.target.classList.contains('icon-hint-btn')) {
                const icon = e.target.dataset.icon;
                if (icon) {
                    const categoryIcon = document.getElementById('categoryIcon');
                    if (categoryIcon) {
                        categoryIcon.value = icon;
                    }
                }
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—á–µ—Ç–∞
        document.addEventListener('change', function(e) {
            if (e.target.id === 'paymentAccount') {
                updateSelectedAccountBalance();
            }
        });



        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏
        document.addEventListener('change', function(e) {
            if (e.target.id === 'transactionGoal') {
                const categorySelect = document.getElementById('transactionCategory');
                if (categorySelect && e.target.value) {
                    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–¶–µ–ª–∏"
                    categorySelect.value = 'goals';
                    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ü–µ–ª–µ–π
                    updateGoalSelection();
                }
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const addCategoryBtn = document.getElementById('addCategoryBtn');
        if (addCategoryBtn) {
            addCategoryBtn.addEventListener('click', () => openCategoryModal('expense'));
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ –¥–æ—Ö–æ–¥–∞
        const incomeNextBtn = document.getElementById('incomeNextBtn');
        const incomePrevBtn = document.getElementById('incomePrevBtn');
        const incomeSubmitBtn = document.getElementById('incomeSubmitBtn');

        if (incomeNextBtn) {
            incomeNextBtn.addEventListener('click', function() {
                const currentStep = getCurrentIncomeStep();
                if (validateIncomeStep(currentStep)) {
                    showIncomeStep(currentStep + 1, 'forward');
                }
            });
        }

        if (incomePrevBtn) {
            incomePrevBtn.addEventListener('click', function() {
                const currentStep = getCurrentIncomeStep();
                showIncomeStep(currentStep - 1, 'backward');
            });
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞
        const incomeDeleteBtn = document.getElementById('incomeDeleteBtn');
        if (incomeDeleteBtn) {
            incomeDeleteBtn.addEventListener('click', function() {
                const incomeId = document.getElementById('incomeId').value;
                if (incomeId) {
                    deleteTransaction(parseInt(incomeId));
                    closeAllModals();
                }
            });
        }

        // –£–±—Ä–∞–Ω–æ –¥—É–±–ª–∏—Ä—É—é—â–µ–µ—Å—è —Å–æ–±—ã—Ç–∏–µ - —Ñ–æ—Ä–º–∞ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ incomeForm.addEventListener

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ —Ä–∞—Å—Ö–æ–¥–∞
        const expenseNextBtn = document.getElementById('expenseNextBtn');
        const expensePrevBtn = document.getElementById('expensePrevBtn');
        const expenseSubmitBtn = document.getElementById('expenseSubmitBtn');

        if (expenseNextBtn) {
            expenseNextBtn.addEventListener('click', function() {
                const currentStep = getCurrentExpenseStep();
                if (validateExpenseStep(currentStep)) {
                    showExpenseStep(currentStep + 1, 'forward');
                }
            });
        }

        if (expensePrevBtn) {
            expensePrevBtn.addEventListener('click', function() {
                const currentStep = getCurrentExpenseStep();
                showExpenseStep(currentStep - 1, 'backward');
            });
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞
        const expenseDeleteBtn = document.getElementById('expenseDeleteBtn');
        if (expenseDeleteBtn) {
            expenseDeleteBtn.addEventListener('click', function() {
                const expenseId = document.getElementById('expenseId').value;
                if (expenseId) {
                    deleteTransaction(parseInt(expenseId));
                    closeAllModals();
                }
            });
        }

        // –£–±—Ä–∞–Ω–æ –¥—É–±–ª–∏—Ä—É—é—â–µ–µ—Å—è —Å–æ–±—ã—Ç–∏–µ - —Ñ–æ—Ä–º–∞ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ expenseForm.addEventListener

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        document.addEventListener('click', function(e) {
            if (e.target.classList.contains('close-modal') && e.target.closest('#categoryModal')) {
                closeCategoryModal();
            }
            
            // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            if (e.target.id === 'categoryModal') {
                closeCategoryModal();
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        document.addEventListener('change', function(e) {
            if (e.target.id === 'categoryTypeSelect') {
                const categoryType = document.getElementById('categoryType');
                if (categoryType) {
                    categoryType.value = e.target.value;
                }
            }
        });



        // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—è —Å—É–º–º—ã –æ–ø–ª–∞—Ç—ã
        document.addEventListener('input', function(e) {
            if (e.target.id === 'paymentAmount') {
                const amount = parseFloat(e.target.value);
                const confirmBtn = document.getElementById('confirmPaymentBtn');
                const goalRemaining = document.getElementById('payGoalRemaining');
                
                if (confirmBtn && goalRemaining) {
                    const remainingText = goalRemaining.textContent;
                    const remainingAmount = parseFloat(remainingText.replace(/[^\d.-]/g, ''));
                    
                    if (amount > remainingAmount) {
                        confirmBtn.disabled = true;
                        confirmBtn.title = `–°—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å ${remainingAmount.toFixed(2)} ‚ÇΩ`;
                    } else if (amount <= 0) {
                        confirmBtn.disabled = true;
                        confirmBtn.title = '–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0';
                    } else {
                        confirmBtn.disabled = false;
                        confirmBtn.title = '';
                    }
                }
            }
        });

        // –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
        const deleteTransactionBtn = document.getElementById('deleteTransactionBtn');
        if (deleteTransactionBtn) {
            deleteTransactionBtn.addEventListener('click', function() {
                const transactionId = document.getElementById('transactionId').value;
                if (transactionId) {
                    deleteTransaction(parseInt(transactionId));
                    closeAllModals();
                }
            });
        }

        // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        const transactionType = document.getElementById('transactionType');
        if (transactionType) {
            transactionType.addEventListener('change', updateTransactionCategories);
        }

        // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å—á–µ—Ç–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ openAccountModal)

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        const nextStepBtn = document.getElementById('nextStepBtn');
        const prevStepBtn = document.getElementById('prevStepBtn');
        
        if (nextStepBtn) {
            nextStepBtn.addEventListener('click', nextStep);
        }
        
        if (prevStepBtn) {
            prevStepBtn.addEventListener('click', prevStep);
        }

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –±–∞–Ω–∫–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ openAccountModal)

        // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        const transactionCategory = document.getElementById('transactionCategory');
        if (transactionCategory) {
            transactionCategory.addEventListener('change', updateGoalSelection);
        }

        // –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è
        document.addEventListener('click', function(e) {
            // –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–∏–∫–æ–Ω–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
            if (e.target.closest('.transaction-edit-icon')) {
                const transactionId = parseInt(e.target.closest('.transaction-edit-icon').dataset.id);
                editTransaction(transactionId);
            }
            
            // –¶–µ–ª–∏
            if (e.target.closest('.edit-goal')) {
                const goalId = parseInt(e.target.closest('.edit-goal').dataset.id);
                editGoal(goalId);
            }
            


            if (e.target.closest('.pay-goal')) {
                const goalId = parseInt(e.target.closest('.pay-goal').dataset.id);
                const target = parseFloat(e.target.closest('.pay-goal').dataset.target);
                const current = parseFloat(e.target.closest('.pay-goal').dataset.current);
                payGoal(goalId, target, current);
            }
            
            // –°—á–µ—Ç–∞
            if (e.target.closest('.edit-account')) {
                const accountId = parseInt(e.target.closest('.edit-account').dataset.id);
                editAccount(accountId);
            }
        });



        // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        updateTransactionCategories();

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –≥—Ä–∞—Ñ–∏–∫–æ–≤
        document.addEventListener('click', function(e) {
            if (e.target.classList.contains('chart-type-btn')) {
                const chartType = e.target.dataset.type;
                const chartName = e.target.dataset.chart;
                
                // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ —ç—Ç–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
                const chartControls = e.target.closest('.chart-controls');
                chartControls.querySelectorAll('.chart-type-btn').forEach(btn => {
                    btn.classList.remove('active');
                });
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Ç–µ–∫—É—â–µ–π –∫–Ω–æ–ø–∫–µ
                e.target.classList.add('active');
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
                updateChartType(chartName, chartType);
            }
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–∞–±–æ–≤ —Ü–µ–ª–µ–π
        document.addEventListener('click', function(e) {
            if (e.target.closest('.goal-tab')) {
                const goalTab = e.target.closest('.goal-tab');
                const tabType = goalTab.dataset.goalTab;
                
                // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö —Ç–∞–±–æ–≤
                document.querySelectorAll('.goal-tab').forEach(tab => {
                    tab.classList.remove('active');
                });
                
                // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–Ω—Ç—ã
                document.querySelectorAll('.goal-tab-content').forEach(content => {
                    content.classList.remove('active');
                });
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Ç–µ–∫—É—â–µ–º—É —Ç–∞–±—É
                goalTab.classList.add('active');
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
                const targetContent = document.getElementById(`${tabType}GoalsContent`);
                if (targetContent) {
                    targetContent.classList.add('active');
                }
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–∞–±–∞
                setTimeout(() => {
                    showPlaceholdersIfNeeded();
                }, 100);
            }
        });

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–±–∞
        const activeTab = document.querySelector('.tab-item.active');
        if (activeTab) {
            updateTabIndicator(activeTab);
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        window.addEventListener('resize', function() {
            const currentActiveTab = document.querySelector('.tab-item.active');
            if (currentActiveTab) {
                updateTabIndicator(currentActiveTab);
            }
        });



        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–º –∫–∞—Ä—Ç–æ—á–∫–∞–º
        document.addEventListener('click', function(e) {
            if (e.target.closest('.clickable-stat')) {
                const statCard = e.target.closest('.clickable-stat');
                const targetTab = statCard.dataset.tab;
                const goalTab = statCard.dataset.goalTab;
                
                if (targetTab) {
                    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –Ω—É–∂–Ω—ã–π —Ç–∞–±
                    const targetTabButton = document.querySelector(`[data-tab="${targetTab}"]`);
                    if (targetTabButton) {
                        // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö —Ç–∞–±–æ–≤
                        document.querySelectorAll('.tab-item').forEach(tab => {
                            tab.classList.remove('active');
                        });
                        
                        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–Ω—Ç—ã —Ç–∞–±–æ–≤
                        document.querySelectorAll('.tab-content').forEach(content => {
                            content.classList.remove('active');
                        });
                        
                        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–π —Ç–∞–±
                        targetTabButton.classList.add('active');
                        const targetContent = document.getElementById(`${targetTab}-tab`);
                        if (targetContent) {
                            targetContent.classList.add('active');
                        }
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–±–∞
                        updateTabIndicator(targetTabButton);
                        
                        // –ï—Å–ª–∏ —ç—Ç–æ —Ç–∞–± —Ü–µ–ª–µ–π, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø–æ–¥—Ç–∞–±
                        if (targetTab === 'goals' && goalTab) {
                            // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö —Ç–∞–±–æ–≤ —Ü–µ–ª–µ–π
                            document.querySelectorAll('.goal-tab').forEach(tab => {
                                tab.classList.remove('active');
                            });
                            
                            // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–Ω—Ç—ã —Ü–µ–ª–µ–π
                            document.querySelectorAll('.goal-tab-content').forEach(content => {
                                content.classList.remove('active');
                            });
                            
                            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–∞–± —Ü–µ–ª–µ–π
                            const targetGoalTab = document.querySelector(`[data-goal-tab="${goalTab}"]`);
                            const targetGoalsContent = document.getElementById(`${goalTab}GoalsContent`);
                            
                            if (targetGoalTab && targetGoalsContent) {
                                targetGoalTab.classList.add('active');
                                targetGoalsContent.classList.add('active');
                                
                                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è –ª—É—á—à–µ–≥–æ UX
                                targetGoalsContent.style.animation = 'none';
                                targetGoalsContent.offsetHeight; // Trigger reflow
                                targetGoalsContent.style.animation = 'fadeIn 0.3s ease';
                                
                                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                                setTimeout(() => {
                                    showPlaceholdersIfNeeded();
                                }, 100);
                            }
                        }
                        
                        // –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ —Ç–∞–±—É
                        targetTabButton.scrollIntoView({ behavior: 'smooth', block: 'center' });
                        
                        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ UX –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Ç–∞–±–æ–≤ —Ü–µ–ª–µ–π
                        if (targetTab === 'goals' && goalTab) {
                            setTimeout(() => {
                                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É —Ü–µ–ª–µ–π
                                const goalsContent = document.getElementById('goals-tab');
                                if (goalsContent) {
                                    goalsContent.scrollIntoView({ behavior: 'smooth', block: 'start' });
                                }
                                
                                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                                setTimeout(() => {
                                    showPlaceholdersIfNeeded();
                                }, 100);
                            }, 300);
                        }
                    }
                }
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—á–µ—Ç–∞ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ —Ä–∞—Å—Ö–æ–¥–æ–≤
        const expenseAccountSelect = document.getElementById('expenseAccount');
        if (expenseAccountSelect) {
            expenseAccountSelect.addEventListener('change', function() {
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—á–µ—Ç–∞
                updateExpenseAccountBalance();
            });
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ —Ä–∞—Å—Ö–æ–¥–æ–≤
        const expenseCategorySelect = document.getElementById('expenseCategory');
        if (expenseCategorySelect) {
            expenseCategorySelect.addEventListener('change', function() {
                const selectedCategoryId = this.value;
                const goalSelectionGroup = document.getElementById('expenseGoalSelectionGroup');
                const expenseGoalSelect = document.getElementById('expenseGoal');
                
                if (selectedCategoryId === 'goals') {
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä —Ü–µ–ª–µ–π
                    goalSelectionGroup.style.display = 'block';
                    populateExpenseGoals();
                } else {
                    // –°–∫—Ä—ã–≤–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä —Ü–µ–ª–µ–π –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ü–µ–ª—å
                    goalSelectionGroup.style.display = 'none';
                    if (expenseGoalSelect) {
                        expenseGoalSelect.value = '';
                    }
                }
            });
        }
    }



    // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–æ—Ö–æ–¥–∞
    function openIncomeModal() {
        const modal = document.getElementById('incomeModal');
        const form = document.getElementById('incomeForm');
        
        if (!modal || !form) return;
        
        // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
        form.reset();
        document.getElementById('incomeId').value = '';
        
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
        document.getElementById('incomeDate').value = new Date().toISOString().split('T')[0];
        
        // –°–±—Ä–æ—Å –∑–∞–≥–æ–ª–æ–≤–∫–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        const incomeModalTitle = document.querySelector('#incomeModal .modal-header h2');
        if (incomeModalTitle) {
            incomeModalTitle.textContent = '–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥';
        }
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
        const incomeDeleteBtn = document.getElementById('incomeDeleteBtn');
        if (incomeDeleteBtn) {
            incomeDeleteBtn.style.display = 'none';
        }
        
        // –°–±—Ä–æ—Å –∫ –ø–µ—Ä–≤–æ–º—É —à–∞–≥—É
        showIncomeStep(1);
        
        // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        modal.style.display = 'block';
        
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        disablePageScroll();
        
        setTimeout(() => {
            modal.classList.add('show');
        }, 10);
        
        // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ—Ö–æ–¥–æ–≤
        populateIncomeCategories();
        
        // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–æ–≤
        populateIncomeAccounts();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—á–µ—Ç–æ–≤
        updateBalance();
    }

    // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ä–∞—Å—Ö–æ–¥–∞
    function openExpenseModal() {
        const modal = document.getElementById('expenseModal');
        const form = document.getElementById('expenseForm');
        
        if (!modal || !form) return;
        
        // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
        form.reset();
        document.getElementById('expenseId').value = '';
        
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
        document.getElementById('expenseDate').value = new Date().toISOString().split('T')[0];
        
        // –°–±—Ä–æ—Å –∑–∞–≥–æ–ª–æ–≤–∫–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        const expenseModalTitle = document.querySelector('#expenseModal .modal-header h2');
        if (expenseModalTitle) {
            expenseModalTitle.textContent = '–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥';
        }
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
        const expenseDeleteBtn = document.getElementById('expenseDeleteBtn');
        if (expenseDeleteBtn) {
            expenseDeleteBtn.style.display = 'none';
        }
        
        // –°–±—Ä–æ—Å –∫ –ø–µ—Ä–≤–æ–º—É —à–∞–≥—É
        showExpenseStep(1);
        
        // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        modal.style.display = 'block';
        
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        disablePageScroll();
        
        setTimeout(() => {
            modal.classList.add('show');
        }, 10);
        
        // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤
        populateExpenseCategories();
        
        // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–æ–≤
        populateExpenseAccounts();
        
        // –°–∫—Ä—ã–≤–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä —Ü–µ–ª–µ–π –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
        const goalSelectionGroup = document.getElementById('expenseGoalSelectionGroup');
        if (goalSelectionGroup) {
            goalSelectionGroup.style.display = 'none';
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—á–µ—Ç–æ–≤
        updateBalance();
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —à–∞–≥ –¥–ª—è –¥–æ—Ö–æ–¥–∞
    function showIncomeStep(stepNumber, direction = 'forward') {
        const currentActiveStep = document.querySelector('#incomeModal .form-step.active');
        const targetStep = document.getElementById(`incomeStep${stepNumber}`);
        
        if (!targetStep) {
            return;
        }

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞
        if (currentActiveStep) {
            currentActiveStep.classList.add(direction === 'forward' ? 'slide-out-left' : 'slide-out-right');
            setTimeout(() => {
                currentActiveStep.classList.remove('active', 'slide-out-left', 'slide-out-right');
                targetStep.classList.add('active');
            }, 300);
        } else {
            targetStep.classList.add('active');
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        updateIncomeStepIndicator(stepNumber);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        updateIncomeNavigationButtons(stepNumber);
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —à–∞–≥ –¥–ª—è —Ä–∞—Å—Ö–æ–¥–∞
    function showExpenseStep(stepNumber, direction = 'forward') {
        const currentActiveStep = document.querySelector('#expenseModal .form-step.active');
        const targetStep = document.getElementById(`expenseStep${stepNumber}`);
        
        if (!targetStep) return;

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞
        if (currentActiveStep) {
            currentActiveStep.classList.add(direction === 'forward' ? 'slide-out-left' : 'slide-out-right');
            setTimeout(() => {
                currentActiveStep.classList.remove('active', 'slide-out-left', 'slide-out-right');
                targetStep.classList.add('active');
            }, 300);
        } else {
            targetStep.classList.add('active');
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        updateExpenseStepIndicator(stepNumber);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        updateExpenseNavigationButtons(stepNumber);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è —à–∞–≥–∞ 3
        if (stepNumber === 3) {
            updateExpenseAccountBalance();
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –¥–æ—Ö–æ–¥–∞
    function updateIncomeStepIndicator(stepNumber) {
        const steps = document.querySelectorAll('#incomeModal .step');
        steps.forEach((step, index) => {
            step.classList.remove('active', 'completed');
            if (index + 1 < stepNumber) {
                step.classList.add('completed');
            } else if (index + 1 === stepNumber) {
                step.classList.add('active');
            }
        });
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è —Ä–∞—Å—Ö–æ–¥–∞
    function updateExpenseStepIndicator(stepNumber) {
        const steps = document.querySelectorAll('#expenseModal .step');
        steps.forEach((step, index) => {
            step.classList.remove('active', 'completed');
            if (index + 1 < stepNumber) {
                step.classList.add('completed');
            } else if (index + 1 === stepNumber) {
                step.classList.add('active');
            }
        });
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –¥–æ—Ö–æ–¥–∞
    function updateIncomeNavigationButtons(stepNumber) {
        const prevBtn = document.getElementById('incomePrevBtn');
        const nextBtn = document.getElementById('incomeNextBtn');
        const submitBtn = document.getElementById('incomeSubmitBtn');
        
        if (stepNumber === 1) {
            prevBtn.style.display = 'none';
            nextBtn.style.display = 'inline-flex';
            submitBtn.style.display = 'none';
        } else if (stepNumber === 3) {
            prevBtn.style.display = 'inline-flex';
            nextBtn.style.display = 'none';
            submitBtn.style.display = 'inline-flex';
        } else {
            prevBtn.style.display = 'inline-flex';
            nextBtn.style.display = 'inline-flex';
            submitBtn.style.display = 'none';
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—Ö–æ–¥–∞
    function updateExpenseNavigationButtons(stepNumber) {
        const prevBtn = document.getElementById('expensePrevBtn');
        const nextBtn = document.getElementById('expenseNextBtn');
        const submitBtn = document.getElementById('expenseSubmitBtn');
        
        if (stepNumber === 1) {
            prevBtn.style.display = 'none';
            nextBtn.style.display = 'inline-flex';
            submitBtn.style.display = 'none';
        } else if (stepNumber === 2) {
            prevBtn.style.display = 'inline-flex';
            nextBtn.style.display = 'inline-flex';
            submitBtn.style.display = 'none';
        } else if (stepNumber === 3) {
            prevBtn.style.display = 'inline-flex';
            nextBtn.style.display = 'none';
            submitBtn.style.display = 'inline-flex';
        } else {
            prevBtn.style.display = 'inline-flex';
            nextBtn.style.display = 'inline-flex';
            submitBtn.style.display = 'none';
        }
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —à–∞–≥ –¥–ª—è –¥–æ—Ö–æ–¥–∞
    function getCurrentIncomeStep() {
        const activeStep = document.querySelector('#incomeModal .form-step.active');
        if (activeStep) {
            return parseInt(activeStep.id.replace('incomeStep', ''));
        }
        return 1;
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —Å—á–µ—Ç–∞ –¥–ª—è —Ä–∞—Å—Ö–æ–¥–∞
    function updateExpenseAccountBalance() {
        const accountSelect = document.getElementById('expenseAccount');
        const balanceInfo = document.getElementById('expenseAccountBalance');
        
        if (accountSelect && balanceInfo) {
            const selectedAccountId = accountSelect.value;
            if (selectedAccountId) {
                const account = accounts.find(a => a.id === parseInt(selectedAccountId));
                if (account) {
                    balanceInfo.textContent = `–î–æ—Å—Ç—É–ø–Ω–æ: ${account.balance.toFixed(2)} ‚ÇΩ`;
                    balanceInfo.style.color = account.balance > 0 ? 'var(--text-secondary)' : 'var(--danger)';
                }
            } else {
                balanceInfo.textContent = '';
            }
        }
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —à–∞–≥ –¥–ª—è —Ä–∞—Å—Ö–æ–¥–∞
    function getCurrentExpenseStep() {
        const activeStep = document.querySelector('#expenseModal .form-step.active');
        if (activeStep) {
            return parseInt(activeStep.id.replace('expenseStep', ''));
        }
        return 1;
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —à–∞–≥–∞ –¥–ª—è –¥–æ—Ö–æ–¥–∞
    function validateIncomeStep(stepNumber) {
        switch (stepNumber) {
            case 1:
                const amount = document.getElementById('incomeAmount').value;
                if (!amount || parseFloat(amount) <= 0) {
                    alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É');
                    return false;
                }
                return true;
            case 2:
                const category = document.getElementById('incomeCategory').value;
                if (!category) {
                    alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é');
                    return false;
                }
                return true;
            case 3:
                const account = document.getElementById('incomeAccount').value;
                if (!account) {
                    alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—á–µ—Ç');
                    return false;
                }
                return true;
            default:
                return true;
        }
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —à–∞–≥–∞ –¥–ª—è —Ä–∞—Å—Ö–æ–¥–∞
    function validateExpenseStep(stepNumber) {
        switch (stepNumber) {
            case 1:
                const category = document.getElementById('expenseCategory').value;
                if (!category) {
                    alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é');
                    return false;
                }
                
                // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è "–¶–µ–ª–∏", –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–∞ —Ü–µ–ª—å
                if (category === 'goals') {
                    const goal = document.getElementById('expenseGoal').value;
                    if (!goal) {
                        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å');
                        return false;
                    }
                }
                return true;
            case 2:
                const account = document.getElementById('expenseAccount').value;
                if (!account) {
                    alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—á–µ—Ç');
                    return false;
                }
                return true;
            case 3:
                const amount = document.getElementById('expenseAmount').value;
                if (!amount || parseFloat(amount) <= 0) {
                    alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É');
                    return false;
                }
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ —Å—á–µ—Ç–∞
                const accountId = document.getElementById('expenseAccount').value;
                if (accountId) {
                    const account = accounts.find(a => a.id === parseInt(accountId));
                    if (account && account.balance < parseFloat(amount)) {
                        alert(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç–µ "${account.name}". –î–æ—Å—Ç—É–ø–Ω–æ: ${account.balance.toFixed(2)} ‚ÇΩ`);
                        return false;
                    }
                }
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è —Å—É–º–º—ã –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ —Ü–µ–ª–∏ —É–±—Ä–∞–Ω–∞ –∏–∑ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                // –≠—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ handleExpenseSubmit –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤
                return true;
            default:
                return true;
        }
    }

    // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–æ—Ö–æ–¥–æ–≤
    let isIncomeSubmitting = false;
    
    // –ú–∞—Å—Å–∏–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–æ—Ö–æ–¥–æ–≤
    let lastIncomeIds = [];
    
    // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    let incomeSubmitHandler = null;
    let expenseSubmitHandler = null;

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã –¥–æ—Ö–æ–¥–∞
    function handleIncomeSubmit() {
        console.log('handleIncomeSubmit –≤—ã–∑–≤–∞–Ω–∞');
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤
        if (isIncomeSubmitting) {
            console.log('handleIncomeSubmit —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
            return;
        }
        isIncomeSubmitting = true;
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑–≤–∞–Ω–∞ –Ω–µ–¥–∞–≤–Ω–æ
        const now = Date.now();
        if (handleIncomeSubmit.lastCall && (now - handleIncomeSubmit.lastCall) < 1000) {
            console.log('handleIncomeSubmit –≤—ã–∑–≤–∞–Ω–∞ —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
            isIncomeSubmitting = false;
            return;
        }
        handleIncomeSubmit.lastCall = now;
        
        const formData = {
            id: document.getElementById('incomeId').value || null,
            type: 'income',
            amount: parseFloat(document.getElementById('incomeAmount').value),
            category: document.getElementById('incomeCategory').value,
            date: document.getElementById('incomeDate').value,
            description: document.getElementById('incomeDescription').value || '',
            accountId: parseInt(document.getElementById('incomeAccount').value)
        };

        // –í–∞–ª–∏–¥–∞—Ü–∏—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
        if (!formData.amount || formData.amount <= 0) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É');
            isIncomeSubmitting = false;
            return;
        }
        
        if (!formData.category) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é');
            isIncomeSubmitting = false;
            return;
        }
        
        if (!formData.accountId) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—á–µ—Ç');
            isIncomeSubmitting = false;
            return;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        if (formData.id) {
            // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            const index = transactions.findIndex(t => t.id === parseInt(formData.id));
            if (index !== -1) {
                const oldTransaction = transactions[index];
                
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä—É—é —Å—É–º–º—É –∫ –±–∞–ª–∞–Ω—Å—É —Å—á–µ—Ç–∞
                const oldAccount = accounts.find(a => a.id === oldTransaction.accountId);
                if (oldAccount) {
                    oldAccount.balance -= oldTransaction.amount;
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                transactions[index] = { ...transactions[index], ...formData };
            }
        } else {
            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            const newTransaction = {
                ...formData,
                id: generateId(transactions)
            };
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å —Ç–∞–∫–∏–º ID
            const existingTransaction = transactions.find(t => t.id === newTransaction.id);
            if (!existingTransaction && !lastIncomeIds.includes(newTransaction.id)) {
                console.log(`–î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Ö–æ–¥: ID=${newTransaction.id}, —Ç–∏–ø=${newTransaction.type}, —Å—É–º–º–∞=${newTransaction.amount}`);
                transactions.push(newTransaction);
                
                // –î–æ–±–∞–≤–ª—è–µ–º ID –≤ –º–∞—Å—Å–∏–≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
                lastIncomeIds.push(newTransaction.id);
                
                // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞—Å—Å–∏–≤ –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 10 –¥–æ—Ö–æ–¥–∞–º–∏
                if (lastIncomeIds.length > 10) {
                    lastIncomeIds = lastIncomeIds.slice(-10);
                }
            } else {
                console.log(`–î–æ—Ö–æ–¥ —Å ID=${newTransaction.id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –¥—É–±–ª–∏—Ä—É–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞
        const account = accounts.find(a => a.id === formData.accountId);
        if (account) {
            account.balance += formData.amount;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        updateLocalStorage();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        renderTransactions();
        renderAccounts();
        updateDashboard();
        
        // –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        closeAllModals();
        
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ —É–±—Ä–∞–Ω–æ
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        isIncomeSubmitting = false;
    }

    // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
    let isExpenseSubmitting = false;
    
    // –ú–∞—Å—Å–∏–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
    let lastExpenseIds = [];

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã —Ä–∞—Å—Ö–æ–¥–∞
    function handleExpenseSubmit() {
        console.log('handleExpenseSubmit –≤—ã–∑–≤–∞–Ω–∞');
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤
        if (isExpenseSubmitting) {
            console.log('handleExpenseSubmit —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
            return;
        }
        isExpenseSubmitting = true;
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑–≤–∞–Ω–∞ –Ω–µ–¥–∞–≤–Ω–æ
        const now = Date.now();
        if (handleExpenseSubmit.lastCall && (now - handleExpenseSubmit.lastCall) < 1000) {
            console.log('handleExpenseSubmit –≤—ã–∑–≤–∞–Ω–∞ —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
            isExpenseSubmitting = false;
            return;
        }
        handleExpenseSubmit.lastCall = now;
        
        const formData = {
            id: document.getElementById('expenseId').value || null,
            type: 'expense',
            amount: parseFloat(document.getElementById('expenseAmount').value),
            category: document.getElementById('expenseCategory').value,
            date: document.getElementById('expenseDate').value,
            description: document.getElementById('expenseDescription').value || '',
            accountId: parseInt(document.getElementById('expenseAccount').value),
            goalId: document.getElementById('expenseGoal').value || null
        };

        // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è "–¶–µ–ª–∏", –Ω–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ —Ü–µ–ª—å, –æ—á–∏—â–∞–µ–º goalId
        if (formData.category === 'goals' && !formData.goalId) {
            formData.goalId = null;
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
        if (!formData.category) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é');
            isExpenseSubmitting = false;
            return;
        }
        
        if (!formData.accountId) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—á–µ—Ç');
            isExpenseSubmitting = false;
            return;
        }
        
        if (!formData.amount || formData.amount <= 0) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É');
            isExpenseSubmitting = false;
            return;
        }
        
        // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è "–¶–µ–ª–∏", –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–∞ —Ü–µ–ª—å
        if (formData.category === 'goals' && !formData.goalId) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å');
            isExpenseSubmitting = false;
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ —Å—á–µ—Ç–∞
        const account = accounts.find(a => a.id === formData.accountId);
        if (account && account.balance < formData.amount) {
            alert(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç–µ "${account.name}". –î–æ—Å—Ç—É–ø–Ω–æ: ${account.balance.toFixed(2)} ‚ÇΩ`);
            isExpenseSubmitting = false;
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è —Å—É–º–º—ã –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ —Ü–µ–ª–∏
        if (formData.category === 'goals' && formData.goalId) {
            const goal = goals.find(g => g.id === parseInt(formData.goalId));
            if (goal) {
                // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ goal.current –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç goal.target
                if (goal.current > goal.target) {
                    goal.current = goal.target;
                }
                
                const remainingAmount = Math.max(0, goal.target - goal.current);
                
                if (formData.amount > remainingAmount) {
                    alert(`–°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã (${formData.amount.toFixed(2)} ‚ÇΩ) –ø—Ä–µ–≤—ã—à–∞–µ—Ç –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å —Ü–µ–ª–∏ (${remainingAmount.toFixed(2)} ‚ÇΩ). –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: ${remainingAmount.toFixed(2)} ‚ÇΩ`);
                    isExpenseSubmitting = false;
                    return;
                }
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        if (formData.id) {
            // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            const index = transactions.findIndex(t => t.id === parseInt(formData.id));
            if (index !== -1) {
                const oldTransaction = transactions[index];
                
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä—É—é —Å—É–º–º—É –∫ –±–∞–ª–∞–Ω—Å—É —Å—á–µ—Ç–∞
                const oldAccount = accounts.find(a => a.id === oldTransaction.accountId);
                if (oldAccount) {
                    oldAccount.balance += oldTransaction.amount; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞—Å—Ö–æ–¥
                }
                
                // –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—É—é —Ü–µ–ª—å, –µ—Å–ª–∏ –±—ã–ª–∞
                if (oldTransaction.goalId) {
                    const oldGoal = goals.find(g => g.id === parseInt(oldTransaction.goalId));
                    if (oldGoal) {
                        oldGoal.current -= oldTransaction.amount;
                        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –Ω–µ —É—Ö–æ–¥–∏–º –≤ –º–∏–Ω—É—Å
                        if (oldGoal.current < 0) {
                            oldGoal.current = 0;
                        }
                    }
                }
                
                // –û—á–∏—â–∞–µ–º goalId –µ—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ "goals"
                if (formData.category !== 'goals') {
                    formData.goalId = null;
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                transactions[index] = { ...transactions[index], ...formData };
            }
        } else {
            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            const newTransaction = {
                ...formData,
                id: generateId(transactions)
            };
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å —Ç–∞–∫–∏–º ID
            const existingTransaction = transactions.find(t => t.id === newTransaction.id);
            if (!existingTransaction && !lastExpenseIds.includes(newTransaction.id)) {
                console.log(`–î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ö–æ–¥: ID=${newTransaction.id}, —Ç–∏–ø=${newTransaction.type}, —Å—É–º–º–∞=${newTransaction.amount}`);
                transactions.push(newTransaction);
                
                // –î–æ–±–∞–≤–ª—è–µ–º ID –≤ –º–∞—Å—Å–∏–≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
                lastExpenseIds.push(newTransaction.id);
                
                // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞—Å—Å–∏–≤ –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 10 —Ä–∞—Å—Ö–æ–¥–∞–º–∏
                if (lastExpenseIds.length > 10) {
                    lastExpenseIds = lastExpenseIds.slice(-10);
                }
            } else {
                console.log(`–†–∞—Å—Ö–æ–¥ —Å ID=${newTransaction.id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –¥—É–±–ª–∏—Ä—É–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞
        if (account) {
            account.balance -= formData.amount;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–ª—å, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
        if (formData.goalId) {
            const goal = goals.find(g => g.id === parseInt(formData.goalId));
            if (goal) {
                goal.current += formData.amount;
                // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ–º —Ü–µ–ª–µ–≤—É—é —Å—É–º–º—É
                if (goal.current > goal.target) {
                    goal.current = goal.target;
                }
            }
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        updateLocalStorage();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        renderTransactions();
        renderAccounts();
        renderGoals();
        updateDashboard();
        
        // –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        closeAllModals();
        
        // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        if (formData.goalId) {
            const goal = goals.find(g => g.id === parseInt(formData.goalId));
            if (goal) {
                if (goal.current >= goal.target) {
                    alert(`üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¶–µ–ª—å "${goal.name}" —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!`);
                } else {
                    const progress = ((goal.current / goal.target) * 100).toFixed(1);
                    alert(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–æ ${formData.amount.toFixed(2)} ‚ÇΩ –¥–ª—è —Ü–µ–ª–∏ "${goal.name}". –ü—Ä–æ–≥—Ä–µ—Å—Å: ${progress}%`);
                }
            }
        } else {
            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ —É–±—Ä–∞–Ω–æ
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        isExpenseSubmitting = false;
    }

    // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ—Ö–æ–¥–æ–≤
    function populateIncomeCategories() {
        const categorySelect = document.getElementById('incomeCategory');
        if (!categorySelect) {
            console.log('incomeCategory select not found');
            return;
        }
        
        if (!categories || !categories.income) {
            console.log('categories.income not found');
            return;
        }
        
        categorySelect.innerHTML = '';
        categories.income.forEach(category => {
            const option = document.createElement('option');
            option.value = category.id;
            option.textContent = `${category.icon} ${category.name}`;
            categorySelect.appendChild(option);
        });
    }

    // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤
    function populateExpenseCategories() {
        const categorySelect = document.getElementById('expenseCategory');
        if (!categorySelect) {
            console.log('expenseCategory select not found');
            return;
        }
        
        if (!categories || !categories.expense) {
            console.log('categories.expense not found');
            return;
        }
        
        categorySelect.innerHTML = '';
        categories.expense.forEach(category => {
            const option = document.createElement('option');
            option.value = category.id;
            option.textContent = `${category.icon} ${category.name}`;
            categorySelect.appendChild(option);
        });
    }

    // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤
    function populateExpenseGoals() {
        const goalSelect = document.getElementById('expenseGoal');
        if (!goalSelect) {
            console.log('expenseGoal select not found');
            return;
        }
        
        if (!goals || goals.length === 0) {
            console.log('No goals found');
            return;
        }
        
        goalSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å</option>';
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ü–µ–ª–∏ (–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ)
        const activeGoals = goals.filter(goal => goal.current < goal.target);
        
        activeGoals.forEach(goal => {
            const option = document.createElement('option');
            option.value = goal.id;
            const name = goal.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
            option.textContent = name;
            goalSelect.appendChild(option);
        });
    }

    // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–æ–≤ –¥–ª—è –¥–æ—Ö–æ–¥–∞
    function populateIncomeAccounts() {
        const accountSelect = document.getElementById('incomeAccount');
        if (!accountSelect) {
            console.log('incomeAccount select not found');
            return;
        }
        
        if (!accounts || accounts.length === 0) {
            return;
        }
        
        accountSelect.innerHTML = '';
        accounts.forEach(account => {
            const option = document.createElement('option');
            option.value = account.id;
            option.textContent = `${account.name} (${account.balance.toFixed(2)} ‚ÇΩ)`;
            accountSelect.appendChild(option);
        });
    }

    // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Ö–æ–¥–∞
    function populateExpenseAccounts() {
        const accountSelect = document.getElementById('expenseAccount');
        if (!accountSelect) {
            console.log('expenseAccount select not found');
            return;
        }
        
        if (!accounts || accounts.length === 0) {
            return;
        }
        
        accountSelect.innerHTML = '';
        accounts.forEach(account => {
            const option = document.createElement('option');
            option.value = account.id;
            option.textContent = `${account.name} (${account.balance.toFixed(2)} ‚ÇΩ)`;
            accountSelect.appendChild(option);
        });
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    // –ü—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ü–µ–ª–∏ —Å–∫—Ä—ã—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    function updateTransactionCategories() {
        const typeSelect = document.getElementById('transactionType');
        const categorySelect = document.getElementById('transactionCategory');
        const goalSelectionGroup = document.getElementById('goalSelectionGroup');
        const goalSelect = document.getElementById('transactionGoal');
        
        if (!typeSelect || !categorySelect || !goalSelectionGroup || !goalSelect) return;
        
        const type = typeSelect.value;
        
        // –û—á–∏—Å—Ç–∫–∞
        categorySelect.innerHTML = '';
        goalSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å</option>';
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        categories[type].forEach(category => {
            const option = document.createElement('option');
            option.value = category.id;
            option.textContent = `${category.icon} ${category.name}`;
            categorySelect.appendChild(option);
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –ø–æ–ª–µ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤
        if (type === 'expense') {
            // –°–∫—Ä—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—É –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            goalSelectionGroup.classList.remove('show');
            goalSelectionGroup.classList.add('hide');
            
            // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ —Ü–µ–ª–∏
            goalSelect.value = '';
        } else {
            goalSelectionGroup.classList.remove('show');
            goalSelectionGroup.classList.add('hide');
            // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ —Ü–µ–ª–∏ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç–∏–ø–∞ –Ω–∞ –¥–æ—Ö–æ–¥
            if (goalSelect) {
                goalSelect.value = '';
            }
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Ü–µ–ª–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    // –¶–µ–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –≤—ã–±—Ä–∞–Ω —Ç–∏–ø "–†–∞—Å—Ö–æ–¥" –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è "–¶–µ–ª–∏" (üéØ)
    function updateGoalSelection() {
        const categorySelect = document.getElementById('transactionCategory');
        const goalSelectionGroup = document.getElementById('goalSelectionGroup');
        const goalSelect = document.getElementById('transactionGoal');
        const typeSelect = document.getElementById('transactionType');
        
        if (!categorySelect || !goalSelectionGroup || !goalSelect || !typeSelect) return;
        
        const selectedCategory = categorySelect.value;
        const type = typeSelect.value;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ü–µ–ª–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –≤—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è "–¶–µ–ª–∏"
        if (type === 'expense' && selectedCategory === 'goals') {
            goalSelectionGroup.classList.remove('hide');
            goalSelectionGroup.classList.add('show');
            
            // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π –ø–µ—Ä–µ–¥ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º
            goalSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å</option>';
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ü–µ–ª–∏ (–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ)
            const activeGoals = goals.filter(goal => {
                const progress = (goal.current / goal.target) * 100;
                const deadline = new Date(goal.deadline);
                const now = new Date();
                return progress < 100 && deadline >= now;
            });
            
            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Ü–µ–ª—è–º–∏
            activeGoals.forEach(goal => {
                const option = document.createElement('option');
                option.value = goal.id;
                option.textContent = `${goal.name} (${goal.current.toFixed(2)}/${goal.target.toFixed(2)} ‚ÇΩ)`;

                goalSelect.appendChild(option);
            });
        } else {
            goalSelectionGroup.classList.remove('show');
            goalSelectionGroup.classList.add('hide');
            // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ —Ü–µ–ª–∏
            goalSelect.value = '';
        }
    }

    // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ü–µ–ª–∏
    function openGoalModal() {
        const modal = document.getElementById('goalModal');
        const form = document.getElementById('goalForm');
        const modalTitle = document.getElementById('goalModalTitle');
        const deleteBtn = document.getElementById('deleteGoalBtn');
        
        if (!modal || !form || !modalTitle || !deleteBtn) return;
        
        // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
        form.reset();
        document.getElementById('goalId').value = '';
        
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã + 1 –º–µ—Å—è—Ü –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const nextMonth = new Date();
        nextMonth.setMonth(nextMonth.getMonth() + 1);
        document.getElementById('goalDeadline').value = nextMonth.toISOString().split('T')[0];
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
        modalTitle.textContent = '–î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å';
        deleteBtn.style.display = 'none';
        
        // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        modal.style.display = 'flex';
        
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        disablePageScroll();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –æ—Ç–∫—Ä—ã—Ç–∏—è
        requestAnimationFrame(() => {
            modal.classList.add('show');
        });
    }

    // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å—á–µ—Ç–∞
    function openAccountModal(accountId = null) {
        const modal = document.getElementById('accountModal');
        const form = document.getElementById('accountForm');
        const modalTitle = document.getElementById('accountModalTitle');
        const deleteBtn = document.getElementById('deleteAccountBtn');
        
        if (!modal || !form || !modalTitle || !deleteBtn) {
            return;
        }
        
        // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
        form.reset();
        document.getElementById('accountId').value = '';
        
        // –°–±—Ä–æ—Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è –±–∞–Ω–∫–∞
        selectedBankName = '';
        
        if (accountId) {
            // –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            const account = accounts.find(a => a.id === parseInt(accountId));
            if (account) {
                modalTitle.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—á–µ—Ç';
                document.getElementById('accountId').value = account.id;
                document.getElementById('accountName').value = account.name;
                document.getElementById('accountType').value = account.type;
                document.getElementById('accountBalance').value = account.balance;
                document.getElementById('accountCurrency').value = account.currency;
                document.getElementById('accountBank').value = account.bank || '';
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                if (account.bank) {
                    const accountBank = document.getElementById('accountBank');
                    const selectedOption = accountBank.options[accountBank.selectedIndex];
                    selectedBankName = selectedOption ? selectedOption.text : '';
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –ø–æ–ª—è –±–∞–Ω–∫–∞
                updateBankFieldVisibility();
            }
        } else {
            // –†–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            modalTitle.textContent = '–î–æ–±–∞–≤–∏—Ç—å —Å—á–µ—Ç';
            deleteBtn.style.display = 'none';
        }
        
        // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        modal.style.display = 'flex';
        
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        disablePageScroll();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –æ—Ç–∫—Ä—ã—Ç–∏—è
        requestAnimationFrame(() => {
            modal.classList.add('show');
        });
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—à–∞–≥–æ–≤–æ–π —Ñ–æ—Ä–º—ã
        initStepForm();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
        setTimeout(() => {
            setupAccountFormHandlers();
        }, 100);
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Ñ–æ—Ä–º—ã —Å—á–µ—Ç–∞
    function setupAccountFormHandlers() {
        // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å—á–µ—Ç–∞
        const accountType = document.getElementById('accountType');
        if (accountType) {
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            accountType.removeEventListener('change', handleAccountTypeChange);
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            accountType.addEventListener('change', handleAccountTypeChange);
        }

        // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–Ω–∫–∞
        const accountBank = document.getElementById('accountBank');
        if (accountBank) {
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            accountBank.removeEventListener('change', handleAccountBankChange);
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            accountBank.addEventListener('change', handleAccountBankChange);
            console.log('–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è accountBank –¥–æ–±–∞–≤–ª–µ–Ω');
        }
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∏–ø–∞ —Å—á–µ—Ç–∞
    function handleAccountTypeChange() {
        console.log('–¢–∏–ø —Å—á–µ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞:', this.value);
        updateBankFieldVisibility();
        // –ù–µ –≤—ã–∑—ã–≤–∞–µ–º autoFillAccountName –∑–¥–µ—Å—å, —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —à–∞–≥—É 3
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–Ω–∫–∞
    function handleAccountBankChange() {
        console.log('–ë–∞–Ω–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞:', this.value);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞
        if (this.value) {
            const selectedOption = this.options[this.selectedIndex];
            selectedBankName = selectedOption.text;
            console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞:', selectedBankName);
        } else {
            selectedBankName = '';
        }
        
        // –ù–µ –≤—ã–∑—ã–≤–∞–µ–º autoFillAccountName –∑–¥–µ—Å—å, —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —à–∞–≥—É 3
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç—å—é –ø–æ–ª—è –±–∞–Ω–∫–∞
    function updateBankFieldVisibility() {
        const accountType = document.getElementById('accountType');
        const bankSelectionGroup = document.getElementById('bankSelectionGroup');
        
        if (!accountType || !bankSelectionGroup) return;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–µ –±–∞–Ω–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ-–Ω–∞–ª–∏—á–Ω—ã—Ö —Å—á–µ—Ç–æ–≤
        if (accountType.value === 'cash') {
            bankSelectionGroup.style.display = 'none';
        } else {
            bankSelectionGroup.style.display = 'block';
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—à–∞–≥–æ–≤–æ–π —Ñ–æ—Ä–º—ã
    function initStepForm() {
        const accountId = document.getElementById('accountId').value;
        const accountType = document.getElementById('accountType').value;
        
        // –ü—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å—Ä–∞–∑—É
        if (accountId) {
            showStep(3);
            updateStepButtons(3);
            updateStepIndicators(3);
        } else {
            // –ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞
            showStep(1);
            updateStepButtons(1);
            updateStepIndicators(1);
        }
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —à–∞–≥
    function showStep(stepNumber, direction = 'forward') {
        const accountModal = document.getElementById('accountModal');
        if (!accountModal) return;
        
        const currentActiveStep = accountModal.querySelector('.form-step.active');
        const targetStep = document.getElementById(`step${stepNumber}`);
        
        if (!targetStep) return;

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
        const isForward = direction === 'forward';
        const slideOutClass = isForward ? 'slide-out-left' : 'slide-out-right';
        const slideInDirection = isForward ? 'slideInFromRight' : 'slideInFromLeft';

        // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —à–∞–≥, –∞–Ω–∏–º–∏—Ä—É–µ–º –µ–≥–æ —Å–∫—Ä—ã—Ç–∏–µ
        if (currentActiveStep && currentActiveStep !== targetStep) {
            currentActiveStep.classList.add(slideOutClass);
            
            setTimeout(() => {
                currentActiveStep.classList.remove('active', slideOutClass);
                currentActiveStep.style.display = 'none';
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —à–∞–≥
                targetStep.style.display = 'block';
                targetStep.classList.add('active');
                
                // –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —à–∞–≥–æ–≤
                updateStepIndicators(stepNumber);
                
                // –ï—Å–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É 3, –æ—á–∏—â–∞–µ–º –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                if (stepNumber === 3) {
                    setTimeout(() => {
                        const accountName = document.getElementById('accountName');
                        if (accountName) {
                            accountName.value = ''; // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è
                        }
                        autoFillAccountName(); // –ó–∞–ø–æ–ª–Ω—è–µ–º –∑–∞–Ω–æ–≤–æ
                    }, 200);
                }
            }, 300);
        } else {
            // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —à–∞–≥–∞, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π
            targetStep.style.display = 'block';
            targetStep.classList.add('active');
            updateStepIndicators(stepNumber);
            
            // –ï—Å–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É 3, –æ—á–∏—â–∞–µ–º –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            if (stepNumber === 3) {
                setTimeout(() => {
                    const accountName = document.getElementById('accountName');
                    if (accountName) {
                        accountName.value = ''; // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è
                    }
                    autoFillAccountName(); // –ó–∞–ø–æ–ª–Ω—è–µ–º –∑–∞–Ω–æ–≤–æ
                }, 200);
            }
        }
    }

    // –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —à–∞–≥–æ–≤
    function updateStepIndicators(currentStep) {
        const accountModal = document.getElementById('accountModal');
        if (!accountModal) return;
        
        const steps = accountModal.querySelectorAll('.step');
        steps.forEach((step, index) => {
            const stepNumber = index + 1;
            step.classList.remove('active', 'completed');
            
            if (stepNumber === currentStep) {
                step.classList.add('active');
            } else if (stepNumber < currentStep) {
                step.classList.add('completed');
            }
        });
    }

    // –û–±–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    function updateStepButtons(currentStep) {
        const prevBtn = document.getElementById('prevStepBtn');
        const nextBtn = document.getElementById('nextStepBtn');
        const saveBtn = document.getElementById('saveAccountBtn');
        const deleteBtn = document.getElementById('deleteAccountBtn');
        const accountType = document.getElementById('accountType');
        const accountId = document.getElementById('accountId');

        // –°–∫—Ä—ã—Ç—å –≤—Å–µ –∫–Ω–æ–ø–∫–∏
        if (prevBtn) prevBtn.style.display = 'none';
        if (nextBtn) nextBtn.style.display = 'none';
        if (saveBtn) saveBtn.style.display = 'none';

        // –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
        if (deleteBtn) {
            deleteBtn.style.display = accountId && accountId.value ? 'inline-flex' : 'none';
        }

        if (currentStep === 1) {
            // –ü–µ—Ä–≤—ã–π —à–∞–≥ - —Ç–æ–ª—å–∫–æ "–î–∞–ª–µ–µ"
            if (nextBtn) {
                nextBtn.style.display = 'inline-flex';
                nextBtn.style.visibility = 'visible';
                nextBtn.style.opacity = '1';
                nextBtn.removeAttribute('style');
                nextBtn.style.display = 'inline-flex';
            }
        } else if (currentStep === 2) {
            // –í—Ç–æ—Ä–æ–π —à–∞–≥ - "–ù–∞–∑–∞–¥" –∏ "–î–∞–ª–µ–µ" (–µ—Å–ª–∏ –Ω–µ –Ω–∞–ª–∏—á–Ω—ã–µ)
            if (prevBtn) prevBtn.style.display = 'inline-flex';
            if (accountType && accountType.value !== 'cash' && nextBtn) {
                nextBtn.style.display = 'inline-flex';
            } else if (saveBtn) {
                saveBtn.style.display = 'inline-flex';
            }
        } else if (currentStep === 3) {
            // –¢—Ä–µ—Ç–∏–π —à–∞–≥ - "–ù–∞–∑–∞–¥" –∏ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"
            if (prevBtn) prevBtn.style.display = 'inline-flex';
            if (saveBtn) saveBtn.style.display = 'inline-flex';
        }
    }

    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    function nextStep() {
        const currentStep = getCurrentStep();
        const accountType = document.getElementById('accountType');

        if (currentStep === 1) {
            if (!accountType.value) {
                alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—á–µ—Ç–∞');
                return;
            }
            
            if (accountType.value === 'cash') {
                // –î–ª—è –Ω–∞–ª–∏—á–Ω—ã—Ö –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —à–∞–≥ 2
                showStep(3, 'forward');
                updateStepButtons(3);
            } else {
                showStep(2, 'forward');
                updateStepButtons(2);
            }
        } else if (currentStep === 2) {
            const accountBank = document.getElementById('accountBank');
            if (!accountBank.value) {
                alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫');
                return;
            }
            showStep(3, 'forward');
            updateStepButtons(3);
        }
    }

    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É
    function prevStep() {
        const currentStep = getCurrentStep();
        const accountType = document.getElementById('accountType');

        if (currentStep === 2) {
            showStep(1, 'backward');
            updateStepButtons(1);
        } else if (currentStep === 3) {
            if (accountType && accountType.value === 'cash') {
                showStep(1, 'backward');
                updateStepButtons(1);
            } else {
                showStep(2, 'backward');
                updateStepButtons(2);
            }
        }
    }

    // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–∞–Ω–∫–∞
    let selectedBankName = '';

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—á–µ—Ç–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –±–∞–Ω–∫–∞
    window.autoFillAccountName = function() {
        const accountType = document.getElementById('accountType');
        const accountBank = document.getElementById('accountBank');
        const accountName = document.getElementById('accountName');
        
        console.log('autoFillAccountName –≤—ã–∑–≤–∞–Ω–∞');
        console.log('accountType:', accountType?.value);
        console.log('accountBank value:', accountBank?.value);
        console.log('accountName —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:', accountName?.value);
        
        if (!accountType || !accountName) {
            console.log('accountType –∏–ª–∏ accountName –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        const typeNames = {
            'cash': '–ù–∞–ª–∏—á–Ω—ã–µ',
            'card': '–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞',
            'credit': '–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞',
            'savings': '–°–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω—ã–π —Å—á–µ—Ç',
            'investment': '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π —Å—á–µ—Ç'
        };
        
        const typeName = typeNames[accountType.value] || '–°—á–µ—Ç';
        console.log('–¢–∏–ø —Å—á–µ—Ç–∞:', typeName);
        
        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
        let bankName = '';
        if (accountBank && accountBank.value && accountType.value !== 'cash') {
            const selectedOption = accountBank.options[accountBank.selectedIndex];
            if (selectedOption) {
                bankName = selectedOption.text;
                console.log('–ü–æ–ª—É—á–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞ –∏–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞:', bankName);
            }
        }
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ –ò –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        if (!accountName.value.trim() && accountType.value && (accountType.value === 'cash' || bankName)) {
            if (bankName) {
                const newName = `${bankName} - ${typeName}`;
                accountName.value = newName;
                console.log('–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å –±–∞–Ω–∫–æ–º:', newName);
            } else if (accountType.value === 'cash') {
                accountName.value = typeName;
                console.log('–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–∞–ª–∏—á–Ω—ã—Ö:', typeName);
            }
        } else {
            console.log('–ü–æ–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –∏–ª–∏ –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
        }
    };

    // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —à–∞–≥
    function getCurrentStep() {
        const accountModal = document.getElementById('accountModal');
        if (!accountModal) return 1;
        
        const activeStep = accountModal.querySelector('.form-step.active');
        if (activeStep) {
            return parseInt(activeStep.id.replace('step', ''));
        }
        return 1;
    }

    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    function disablePageScroll() {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        const scrollY = window.scrollY;
        document.body.classList.add('modal-open');
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é body –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        document.body.style.top = `-${scrollY}px`;
        document.body.style.position = 'fixed';
        document.body.style.width = '100%';
    }

    function enablePageScroll() {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        const scrollY = document.body.style.top;
        document.body.classList.remove('modal-open');
        document.body.style.position = '';
        document.body.style.top = '';
        document.body.style.width = '';
        
        if (scrollY) {
            // –ü–ª–∞–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
            window.scrollTo(0, parseInt(scrollY || '0') * -1);
        }
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
    function closeAllModals() {
        document.querySelectorAll('.modal').forEach(modal => {
            if (modal.classList.contains('show')) {
                // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∑–∞–∫—Ä—ã—Ç–∏—è –≤–Ω–∏–∑
                modal.classList.add('closing');
                
                // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∏ —Å–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                setTimeout(() => {
                    modal.style.display = 'none';
                    // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å—ã
                    modal.classList.remove('show', 'closing');
                }, 400); // –í—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏
            } else {
                modal.style.display = 'none';
            }
        });
        
        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Å –æ—Å—Ç–∞—Ç–∫–æ–º —Ü–µ–ª–∏
        const remainingAmountBtns = document.querySelectorAll('.payment-hint-remaining');
        remainingAmountBtns.forEach(btn => {
            btn.classList.remove('success');
        });
        
        // –°–∫—Ä—ã–≤–∞–µ–º —Ü–µ–ª–∏ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
        const goalSelectionGroup = document.getElementById('goalSelectionGroup');
        if (goalSelectionGroup) {
            goalSelectionGroup.classList.remove('show');
            goalSelectionGroup.classList.add('hide');
        }
        
        // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏
        const goalSelect = document.getElementById('transactionGoal');
        if (goalSelect) {
            goalSelect.value = '';
        }
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        enablePageScroll();
    }

    // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
    function openTransferModal() {
        const modal = document.getElementById('transferModal');
        const form = document.getElementById('transferForm');
        
        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        form.reset();
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ø–∏—Å–∫–∏ —Å—á–µ—Ç–æ–≤
        populateTransferAccounts();
        
        // –°–∫—Ä—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        document.getElementById('fromAccountBalance').style.display = 'none';
        document.getElementById('transferSummary').style.display = 'none';
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        modal.style.display = 'block';
        setTimeout(() => {
            modal.classList.add('show');
        }, 10);
        
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        disablePageScroll();
    }

    // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ —Å—á–µ—Ç–æ–≤ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ –ø–µ—Ä–µ–≤–æ–¥–∞
    function populateTransferAccounts() {
        const fromSelect = document.getElementById('transferFromAccount');
        const toSelect = document.getElementById('transferToAccount');
        
        // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–∫–∏
        fromSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å—á–µ—Ç</option>';
        toSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å—á–µ—Ç</option>';
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç–∞
        accounts.forEach(account => {
            const option1 = document.createElement('option');
            option1.value = account.id;
            option1.textContent = `${account.name} (${account.balance.toFixed(2)} ‚ÇΩ)`;
            fromSelect.appendChild(option1);
            
            const option2 = document.createElement('option');
            option2.value = account.id;
            option2.textContent = `${account.name} (${account.balance.toFixed(2)} ‚ÇΩ)`;
            toSelect.appendChild(option2);
        });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—á–µ—Ç–∞ —Å–ø–∏—Å–∞–Ω–∏—è
    function handleFromAccountChange() {
        const fromAccountId = document.getElementById('transferFromAccount').value;
        const balanceInfo = document.getElementById('fromAccountBalance');
        const balanceAmount = document.getElementById('fromAccountBalanceAmount');
        
        if (fromAccountId) {
            const account = accounts.find(acc => acc.id == fromAccountId);
            if (account) {
                balanceAmount.textContent = `${account.balance.toFixed(2)} ‚ÇΩ`;
                balanceInfo.style.display = 'flex';
            }
        } else {
            balanceInfo.style.display = 'none';
        }
        
        updateTransferSummary();
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞
    function updateTransferSummary() {
        const fromAccountId = document.getElementById('transferFromAccount').value;
        const toAccountId = document.getElementById('transferToAccount').value;
        const amount = parseFloat(document.getElementById('transferAmount').value) || 0;
        const summary = document.getElementById('transferSummary');
        const feeElement = document.getElementById('transferFee');
        const totalElement = document.getElementById('transferTotal');
        
        if (fromAccountId && toAccountId && amount > 0) {
            // –ö–æ–º–∏—Å—Å–∏—è 0% (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å)
            const fee = 0;
            const total = amount + fee;
            
            feeElement.textContent = `${fee.toFixed(2)} ‚ÇΩ`;
            totalElement.textContent = `${total.toFixed(2)} ‚ÇΩ`;
            
            summary.style.display = 'block';
        } else {
            summary.style.display = 'none';
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã
    function setTransferAmount(amount) {
        document.getElementById('transferAmount').value = amount;
        updateTransferSummary();
    }

    // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    let isTransactionSubmitting = false;
    
    // –ú–∞—Å—Å–∏–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    let lastTransactionIds = [];

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    function handleTransactionSubmit(e) {
        e.preventDefault();
        console.log('handleTransactionSubmit –≤—ã–∑–≤–∞–Ω–∞');
        
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤
        if (isTransactionSubmitting) {
            console.log('handleTransactionSubmit —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
            return;
        }
        isTransactionSubmitting = true;
        
        const transactionId = document.getElementById('transactionId');
        const transactionType = document.getElementById('transactionType');
        const transactionAmount = document.getElementById('transactionAmount');
        const transactionCategory = document.getElementById('transactionCategory');
        const transactionDate = document.getElementById('transactionDate');
        const transactionDescription = document.getElementById('transactionDescription');
        const transactionAccount = document.getElementById('transactionAccount');
        
        if (!transactionId || !transactionType || !transactionAmount || !transactionCategory || 
            !transactionDate || !transactionDescription || !transactionAccount) {
            isTransactionSubmitting = false;
            return;
        }
        

        
        const transactionGoal = document.getElementById('transactionGoal');
        
        const formData = {
            id: transactionId.value ? parseInt(transactionId.value) : generateId(transactions),
            type: transactionType.value,
            amount: parseFloat(transactionAmount.value),
            category: transactionCategory.value,
            date: transactionDate.value,
            description: transactionDescription.value || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è',
            accountId: parseInt(transactionAccount.value),
            goalId: transactionGoal ? transactionGoal.value : null
        };
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –Ω–µ–¥–∞–≤–Ω–æ
        if (lastTransactionIds.includes(formData.id)) {
            console.log('–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–æ:', formData.id);
            isTransactionSubmitting = false;
            return;
        }
        
        // –ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        const existingIndex = transactions.findIndex(t => t.id === formData.id);
        
        if (existingIndex >= 0) {
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            const oldTransaction = transactions[existingIndex];
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ —Å—á–µ—Ç
            const oldAccount = accounts.find(a => a.id === oldTransaction.accountId);
            if (oldAccount) {
                if (oldTransaction.type === 'income') {
                    oldAccount.balance -= oldTransaction.amount;
                } else {
                    oldAccount.balance += oldTransaction.amount;
                }
            }
            
                    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞—Ä–æ–π —Ü–µ–ª–∏, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞
        if (oldTransaction.goalId && oldTransaction.type === 'expense') {
            const oldGoal = goals.find(g => g.id === oldTransaction.goalId);
            if (oldGoal) {
                oldGoal.current -= oldTransaction.amount;
                if (oldGoal.current < 0) oldGoal.current = 0;
            }
        }
        
        // –ï—Å–ª–∏ —Ç–∏–ø –∏–∑–º–µ–Ω–∏–ª—Å—è —Å —Ä–∞—Å—Ö–æ–¥–∞ –Ω–∞ –¥–æ—Ö–æ–¥, –∏ –±—ã–ª–∞ —Å–≤—è–∑–∞–Ω–∞ —Ü–µ–ª—å, —É–±–∏—Ä–∞–µ–º —Å–≤—è–∑—å
        if (oldTransaction.goalId && oldTransaction.type === 'expense' && formData.type === 'income') {
            formData.goalId = null;
        }
        
        // –ï—Å–ª–∏ —Ç–∏–ø –∏–∑–º–µ–Ω–∏–ª—Å—è —Å —Ä–∞—Å—Ö–æ–¥–∞ –Ω–∞ –¥–æ—Ö–æ–¥, –∏ –±—ã–ª–∞ —Å–≤—è–∑–∞–Ω–∞ —Ü–µ–ª—å, —É–±–∏—Ä–∞–µ–º —Å–≤—è–∑—å
        if (oldTransaction.goalId && oldTransaction.type === 'expense' && formData.type === 'income') {
            formData.goalId = null;
        }
        
        // –ï—Å–ª–∏ —Ç–∏–ø –∏–∑–º–µ–Ω–∏–ª—Å—è —Å –¥–æ—Ö–æ–¥–∞ –Ω–∞ —Ä–∞—Å—Ö–æ–¥, –∏ –±—ã–ª–∞ —Å–≤—è–∑–∞–Ω–∞ —Ü–µ–ª—å, —É–±–∏—Ä–∞–µ–º —Å–≤—è–∑—å
        if (oldTransaction.goalId && oldTransaction.type === 'income' && formData.type === 'expense') {
            formData.goalId = null;
        }
        
        // –ï—Å–ª–∏ —Å—É–º–º–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å —Ü–µ–ª—å—é, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ü–µ–ª—å
        if (oldTransaction.goalId && oldTransaction.type === 'expense' && formData.type === 'expense' && 
            oldTransaction.goalId === formData.goalId && oldTransaction.amount !== formData.amount) {
            const goal = goals.find(g => g.id === oldTransaction.goalId);
            if (goal) {
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä—É—é —Å—É–º–º—É
                goal.current -= oldTransaction.amount;
                if (goal.current < 0) goal.current = 0;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ —Ü–µ–ª–∏ –¥–ª—è –Ω–æ–≤–æ–π —Å—É–º–º—ã
                const remainingAmount = Math.max(0, goal.target - goal.current);
                if (formData.amount > remainingAmount) {
                    formData.amount = remainingAmount;
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—É–º–º—É
                goal.current += formData.amount;
                if (goal.current > goal.target) goal.current = goal.target;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –µ—Å–ª–∏ —Ü–µ–ª—å –±—ã–ª–∞ —É–∫–∞–∑–∞–Ω–∞
                if (formData.description === '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è' || formData.description === '') {
                    formData.description = `–û–ø–ª–∞—Ç–∞ —Ü–µ–ª–∏: ${goal.name}`;
                }
            }
        }
        
        // –ï—Å–ª–∏ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–æ–±–∞–≤–∏–ª–∞—Å—å –Ω–æ–≤–∞—è —Ü–µ–ª—å (—Ä–∞–Ω—å—à–µ —Ü–µ–ª–∏ –Ω–µ –±—ã–ª–æ)
        if (!oldTransaction.goalId && formData.goalId && formData.type === 'expense') {
            const newGoal = goals.find(g => g.id === parseInt(formData.goalId));
            if (newGoal) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ —Ü–µ–ª–∏
                const remainingAmount = newGoal.target - newGoal.current;
                if (formData.amount > remainingAmount) {
                    formData.amount = remainingAmount;
                }
                
                newGoal.current += formData.amount;
                if (newGoal.current > newGoal.target) newGoal.current = newGoal.target;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –µ—Å–ª–∏ —Ü–µ–ª—å –±—ã–ª–∞ —É–∫–∞–∑–∞–Ω–∞
                if (formData.description === '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è' || formData.description === '') {
                    formData.description = `–û–ø–ª–∞—Ç–∞ —Ü–µ–ª–∏: ${newGoal.name}`;
                }
            }
        }
        
        // –ï—Å–ª–∏ —Ü–µ–ª—å –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –æ–±–µ —Ü–µ–ª–∏
        if (oldTransaction.goalId && oldTransaction.type === 'expense' && formData.type === 'expense' && 
            oldTransaction.goalId !== formData.goalId) {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å—Ç–∞—Ä–æ–π —Ü–µ–ª–∏
            const oldGoal = goals.find(g => g.id === oldTransaction.goalId);
            if (oldGoal) {
                oldGoal.current -= oldTransaction.amount;
                if (oldGoal.current < 0) oldGoal.current = 0;
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–æ–≤–æ–π —Ü–µ–ª–∏
            if (formData.goalId) {
                const newGoal = goals.find(g => g.id === parseInt(formData.goalId));
                if (newGoal) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ —Ü–µ–ª–∏ –¥–ª—è –Ω–æ–≤–æ–π —Ü–µ–ª–∏
                    const remainingAmount = newGoal.target - newGoal.current;
                    if (formData.amount > remainingAmount) {
                        formData.amount = remainingAmount;
                    }
                    
                    newGoal.current += formData.amount;
                    if (newGoal.current > newGoal.target) newGoal.current = newGoal.target;
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –µ—Å–ª–∏ —Ü–µ–ª—å –±—ã–ª–∞ —É–∫–∞–∑–∞–Ω–∞
                    if (formData.description === '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è' || formData.description === '') {
                        formData.description = `–û–ø–ª–∞—Ç–∞ —Ü–µ–ª–∏: ${newGoal.name}`;
                    }
                }
            }
        }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            transactions[existingIndex] = formData;
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫ —Å—á–µ—Ç—É
            const newAccount = accounts.find(a => a.id === formData.accountId);
            if (newAccount) {
                if (formData.type === 'income') {
                    newAccount.balance += formData.amount;
                } else {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤
                    if (newAccount.balance < formData.amount) {
                        alert(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç–µ "${newAccount.name}". –î–æ—Å—Ç—É–ø–Ω–æ: ${newAccount.balance.toFixed(2)} ${newAccount.currency}, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ: ${formData.amount.toFixed(2)} ${newAccount.currency}`);
                        isTransactionSubmitting = false;
                        return;
                    }
                    newAccount.balance -= formData.amount;
                }
            }
            

                } else {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –Ω–æ–≤—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
            if (formData.type === 'expense') {
                const account = accounts.find(a => a.id === formData.accountId);
                if (!account) {
                    alert('–°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!');
                    isTransactionSubmitting = false;
                    return;
                }
                
                if (account.balance < formData.amount) {
                    alert(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç–µ "${account.name}". –î–æ—Å—Ç—É–ø–Ω–æ: ${account.balance.toFixed(2)} ${account.currency}, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ: ${formData.amount.toFixed(2)} ${account.currency}`);
                    isTransactionSubmitting = false;
                    return;
                }
                
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã —Ü–µ–ª–∏, –µ—Å–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–≤—è–∑–∞–Ω–∞ —Å —Ü–µ–ª—å—é (–¥–ª—è –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)
                if (formData.goalId) {
                    const goal = goals.find(g => g.id === parseInt(formData.goalId));
                    if (goal) {
                        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ goal.current –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç goal.target
                        if (goal.current > goal.target) {
                            goal.current = goal.target;
                        }
                        
                        const remainingAmount = Math.max(0, goal.target - goal.current);
                        if (formData.amount > remainingAmount) {
                            alert(`–°—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–∞ (${formData.amount.toFixed(2)} ‚ÇΩ) –ø—Ä–µ–≤—ã—à–∞–µ—Ç –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å —Ü–µ–ª–∏ "${goal.name}" (${remainingAmount.toFixed(2)} ‚ÇΩ). –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: ${remainingAmount.toFixed(2)} ‚ÇΩ`);
                            isTransactionSubmitting = false;
                            return;
                        }
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–ª—å
                        goal.current += formData.amount;
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –ª–∏ —Ü–µ–ª—å
                        if (goal.current >= goal.target) {
                            goal.current = goal.target; // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ–º —Ü–µ–ª—å
                        }
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –µ—Å–ª–∏ —Ü–µ–ª—å –±—ã–ª–∞ —É–∫–∞–∑–∞–Ω–∞
                        if (formData.description === '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è' || formData.description === '') {
                            formData.description = `–û–ø–ª–∞—Ç–∞ —Ü–µ–ª–∏: ${goal.name}`;
                        }
                    }
                }
            }
            
            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å —Ç–∞–∫–∏–º ID
            const existingTransaction = transactions.find(t => t.id === formData.id);
            if (!existingTransaction) {
                console.log(`–î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é: ID=${formData.id}, —Ç–∏–ø=${formData.type}, —Å—É–º–º–∞=${formData.amount}`);
                transactions.push(formData);
            } else {
                console.log(`–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å ID=${formData.id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
            }
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Å—á–µ—Ç–∞
            const account = accounts.find(a => a.id === formData.accountId);
            if (account) {
                if (formData.type === 'income') {
                    account.balance += formData.amount;
                } else {
                    account.balance -= formData.amount;
                }
            }
        }
        

        

        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        updateLocalStorage();
        renderAccounts(); // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—á–µ—Ç–æ–≤
        renderGoals(); // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ü–µ–ª–µ–π
        renderTransactions(); // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        updateDashboard();
        closeAllModals();
        
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ —Ü–µ–ª–∏
        if (formData.goalId && formData.type === 'expense') {
            const goal = goals.find(g => g.id === parseInt(formData.goalId));
            if (goal) {
                if (goal.current >= goal.target) {
                    alert(`üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¶–µ–ª—å "${goal.name}" —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!`);
                } else {
                    const progress = ((goal.current / goal.target) * 100).toFixed(1);
                    alert(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–æ ${formData.amount.toFixed(2)} ‚ÇΩ –¥–ª—è —Ü–µ–ª–∏ "${goal.name}". –ü—Ä–æ–≥—Ä–µ—Å—Å: ${progress}%`);
                }
            }
        }
        
        // –ê–Ω–∏–º–∞—Ü–∏—è —É—Å–ø–µ—Ö–∞
        const button = e.target.querySelector('button[type="submit"]');
        if (button) {
            button.classList.add('pulse');
            setTimeout(() => button.classList.remove('pulse'), 600);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –º–∞—Å—Å–∏–≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        lastTransactionIds.push(formData.id);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞—Å—Å–∏–≤ –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 10 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
        if (lastTransactionIds.length > 10) {
            lastTransactionIds = lastTransactionIds.slice(-10);
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        isTransactionSubmitting = false;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    function handleCategorySubmit(e) {
        e.preventDefault();
        
        const categoryId = document.getElementById('categoryId');
        const categoryName = document.getElementById('categoryName');
        const categoryIcon = document.getElementById('categoryIcon');
        const categoryTypeSelect = document.getElementById('categoryTypeSelect');
        
        if (!categoryId || !categoryName || !categoryIcon || !categoryTypeSelect) return;
        
        const type = categoryTypeSelect.value;
        
        const formData = {
            id: categoryId.value || generateCategoryId(type),
            name: categoryName.value,
            icon: categoryIcon.value
        };
        
        // –ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const existingIndex = categories[type].findIndex(c => c.id === formData.id);
        
        if (existingIndex >= 0) {
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            categories[type][existingIndex] = formData;
        } else {
            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            categories[type].push(formData);
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        updateLocalStorage();
        categoriesSettingsLoaded = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
        loadCategoriesSettings();
        renderTransactions();
        updateDashboard();
        closeAllModals();
        
        // –ê–Ω–∏–º–∞—Ü–∏—è —É—Å–ø–µ—Ö–∞
        const button = e.target.querySelector('button[type="submit"]');
        if (button) {
            button.classList.add('pulse');
            setTimeout(() => button.classList.remove('pulse'), 600);
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã —Ü–µ–ª–∏
    function handleGoalSubmit(e) {
        e.preventDefault();
        
        const goalId = document.getElementById('goalId');
        const goalName = document.getElementById('goalName');
        const goalTarget = document.getElementById('goalTarget');
        const goalCurrent = document.getElementById('goalCurrent');
        const goalDeadline = document.getElementById('goalDeadline');
        
        if (!goalId || !goalName || !goalTarget || !goalCurrent || !goalDeadline) return;
        
        const formData = {
            id: goalId.value ? parseInt(goalId.value) : generateId(goals),
            name: goalName.value,
            target: parseFloat(goalTarget.value),
            current: parseFloat(goalCurrent.value),
            deadline: goalDeadline.value
        };
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (formData.current > formData.target) {
            alert('–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å —Ü–µ–ª–µ–≤—É—é!');
            goalCurrent.classList.add('shake');
            setTimeout(() => goalCurrent.classList.remove('shake'), 600);
            return;
        }
        
        // –ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ü–µ–ª–∏
        const existingIndex = goals.findIndex(g => g.id === formData.id);
        
        if (existingIndex >= 0) {
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ü–µ–ª–∏ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
            const existingGoal = goals[existingIndex];
            goals[existingIndex] = {
                ...formData,
                current: existingGoal.current // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã–π —á–µ—Ä–µ–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            };
        } else {
            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ü–µ–ª–∏
            goals.push(formData);
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        updateLocalStorage();
        renderGoals();
        updateDashboard();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–ª–∏
        showPlaceholdersIfNeeded();
        
        closeAllModals();
        
        // –ê–Ω–∏–º–∞—Ü–∏—è —É—Å–ø–µ—Ö–∞
        const button = e.target.querySelector('button[type="submit"]');
        if (button) {
            button.classList.add('pulse');
            setTimeout(() => button.classList.remove('pulse'), 600);
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã —Å—á–µ—Ç–∞
    function handleAccountSubmit(e) {
        e.preventDefault();
        
        const accountId = document.getElementById('accountId');
        const accountName = document.getElementById('accountName');
        const accountType = document.getElementById('accountType');
        const accountBalance = document.getElementById('accountBalance');
        const accountCurrency = document.getElementById('accountCurrency');
        const accountBank = document.getElementById('accountBank');
        
        if (!accountId || !accountName || !accountType || !accountBalance || !accountCurrency) return;
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –±–∞–Ω–∫–∞
        let bankName = '';
        if (accountBank && accountBank.value) {
            const selectedOption = accountBank.options[accountBank.selectedIndex];
            bankName = selectedOption.text;
        }

        const formData = {
            id: accountId.value ? parseInt(accountId.value) : generateId(accounts),
            name: accountName.value,
            type: accountType.value,
            balance: parseFloat(accountBalance.value),
            currency: accountCurrency.value,
            bank: accountBank ? accountBank.value : '',
            bankName: bankName
        };
        
        // –ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å—á–µ—Ç–∞
        const existingIndex = accounts.findIndex(a => a.id === formData.id);
        
        if (existingIndex >= 0) {
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å—á–µ—Ç–∞
            accounts[existingIndex] = formData;
        } else {
            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—á–µ—Ç–∞
            accounts.push(formData);
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        updateLocalStorage();
        renderAccounts();
        updateDashboard();
        closeAllModals();
        
        // –ê–Ω–∏–º–∞—Ü–∏—è —É—Å–ø–µ—Ö–∞
        const button = e.target.querySelector('button[type="submit"]');
        if (button) {
            button.classList.add('pulse');
            setTimeout(() => button.classList.remove('pulse'), 600);
        }
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞
    function deleteAccount(accountId) {
        if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Å—á–µ—Ç? –í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Ç–∞–∫–∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.')) return;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        const relatedTransactions = transactions.filter(t => t.accountId === parseInt(accountId));
        
        if (relatedTransactions.length > 0) {
            if (!confirm(`–ù–∞–π–¥–µ–Ω–æ ${relatedTransactions.length} —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π. –û–Ω–∏ —Ç–∞–∫–∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?`)) return;
            
            // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            transactions = transactions.filter(t => t.accountId !== parseInt(accountId));
        }
        
        // –£–¥–∞–ª—è–µ–º —Å—á–µ—Ç
        const accountIndex = accounts.findIndex(a => a.id === parseInt(accountId));
        if (accountIndex === -1) return;
        
        accounts.splice(accountIndex, 1);
        
        // –ï—Å–ª–∏ —É–¥–∞–ª—è–µ–º—ã–π —Å—á–µ—Ç –±—ã–ª —Ç–µ–∫—É—â–∏–º, –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
        if (currentAccountId === parseInt(accountId)) {
            currentAccountId = accounts.length > 0 ? accounts[0].id : null;
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        updateLocalStorage();
        renderAccounts();
        renderTransactions(); // –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (—Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—á–µ—Ç–æ–≤)
        updateDashboard();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã (—É–±–∏—Ä–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–π —Å—á–µ—Ç –∏–∑ —Ñ–∏–ª—å—Ç—Ä–∞)
        initFilters();
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        closeAllModals();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        alert('–°—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω');
    }



    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    function editTransaction(id) {
        let transaction = transactions.find(t => t.id === id);
        if (!transaction) {
            // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–º—É ID
            transaction = transactions.find(t => t.id === id.toString());
        }
        if (!transaction) {
            // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ —á–∏—Å–ª–æ–≤–æ–º—É ID
            transaction = transactions.find(t => parseInt(t.id) === id);
        }
        if (!transaction) {
            console.log('Transaction not found with id:', id);
            return;
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∞—è —Ñ–æ—Ä–º–∞ –Ω—É–∂–Ω–∞ (–¥–æ—Ö–æ–¥ –∏–ª–∏ —Ä–∞—Å—Ö–æ–¥)
        if (transaction.type === 'income') {
            // –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤
            populateIncomeCategories();
            populateIncomeAccounts();
            
            // –ò–∑–º–µ–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            const incomeModalTitle = document.querySelector('#incomeModal .modal-header h2');
            if (incomeModalTitle) {
                incomeModalTitle.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Ö–æ–¥';
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
            const incomeDeleteBtn = document.getElementById('incomeDeleteBtn');
            if (incomeDeleteBtn) {
                incomeDeleteBtn.style.display = 'inline-flex';
            }
            
            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–æ—Ö–æ–¥–∞ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
            setTimeout(() => {
                const incomeId = document.getElementById('incomeId');
                const incomeAmount = document.getElementById('incomeAmount');
                const incomeCategory = document.getElementById('incomeCategory');
                const incomeDate = document.getElementById('incomeDate');
                const incomeDescription = document.getElementById('incomeDescription');
                const incomeAccount = document.getElementById('incomeAccount');
                
                if (incomeId) incomeId.value = transaction.id;
                if (incomeAmount) incomeAmount.value = transaction.amount;
                if (incomeCategory) incomeCategory.value = transaction.category;
                if (incomeDate) incomeDate.value = transaction.date;
                if (incomeDescription) incomeDescription.value = transaction.description;
                if (incomeAccount) incomeAccount.value = transaction.accountId;
            }, 50);
            
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ—Ö–æ–¥–∞
            const incomeModal = document.getElementById('incomeModal');
            if (incomeModal) {
                incomeModal.style.display = 'flex';
                incomeModal.style.zIndex = '9999';
                incomeModal.style.visibility = 'visible';
                incomeModal.style.opacity = '1';
                incomeModal.classList.add('show');
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫ –ø–µ—Ä–≤–æ–º—É —à–∞–≥—É —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
                setTimeout(() => {
                    showIncomeStep(1);
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∏–¥–Ω–æ
                    const modalContent = incomeModal.querySelector('.modal-content');
                    if (modalContent) {
                        modalContent.style.visibility = 'visible';
                        modalContent.style.opacity = '1';
                        modalContent.classList.add('show');
                    }
                }, 100);
            }
        } else {
            // –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
            populateExpenseCategories();
            populateExpenseAccounts();
            populateExpenseGoals();
            
            // –ò–∑–º–µ–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            const expenseModalTitle = document.querySelector('#expenseModal .modal-header h2');
            if (expenseModalTitle) {
                expenseModalTitle.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥';
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
            const expenseDeleteBtn = document.getElementById('expenseDeleteBtn');
            if (expenseDeleteBtn) {
                expenseDeleteBtn.style.display = 'inline-flex';
            }
            
            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É —Ä–∞—Å—Ö–æ–¥–∞ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
            setTimeout(() => {
                const expenseId = document.getElementById('expenseId');
                const expenseAmount = document.getElementById('expenseAmount');
                const expenseCategory = document.getElementById('expenseCategory');
                const expenseDate = document.getElementById('expenseDate');
                const expenseDescription = document.getElementById('expenseDescription');
                const expenseAccount = document.getElementById('expenseAccount');
                const expenseGoal = document.getElementById('expenseGoal');
                
                if (expenseId) expenseId.value = transaction.id;
                if (expenseAmount) expenseAmount.value = transaction.amount;
                if (expenseCategory) expenseCategory.value = transaction.category;
                if (expenseDate) expenseDate.value = transaction.date;
                if (expenseDescription) expenseDescription.value = transaction.description;
                if (expenseAccount) expenseAccount.value = transaction.accountId;
                if (transaction.goalId && expenseGoal) {
                    expenseGoal.value = transaction.goalId;
                }
            }, 50);
            
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–∞—Å—Ö–æ–¥–∞
            const expenseModal = document.getElementById('expenseModal');
            if (expenseModal) {
                expenseModal.style.display = 'flex';
                expenseModal.style.zIndex = '9999';
                expenseModal.style.visibility = 'visible';
                expenseModal.style.opacity = '1';
                expenseModal.classList.add('show');
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫ –ø–µ—Ä–≤–æ–º—É —à–∞–≥—É —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
                setTimeout(() => {
                    showExpenseStep(1);
                }, 100);
            }
        }
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    function deleteTransaction(id) {
        if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é?')) return;
        
        const transactionIndex = transactions.findIndex(t => t.id === id);
        if (transactionIndex === -1) return;
        
        const transaction = transactions[transactionIndex];
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Ü–µ–ª–∏, –µ—Å–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –±—ã–ª–∞ —Å–≤—è–∑–∞–Ω–∞ —Å —Ü–µ–ª—å—é
        if (transaction.goalId && transaction.type === 'expense') {
            const goal = goals.find(g => g.id === transaction.goalId);
            if (goal) {
                goal.current -= transaction.amount;
                if (goal.current < 0) goal.current = 0;
            }
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Å—á–µ—Ç–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        const account = accounts.find(a => a.id === transaction.accountId);
        if (account) {
            if (transaction.type === 'income') {
                account.balance -= transaction.amount; // –£–±–∏—Ä–∞–µ–º –¥–æ—Ö–æ–¥
            } else {
                account.balance += transaction.amount; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞—Å—Ö–æ–¥
            }
        }
        
        // –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        transactions.splice(transactionIndex, 1);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        updateLocalStorage();
        renderAccounts(); // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—á–µ—Ç–æ–≤
        renderGoals(); // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ü–µ–ª–µ–π
        updateDashboard();
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        closeAllModals();
    }

    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–ª–∏
    function editGoal(id) {
        const goal = goals.find(g => g.id === id);
        if (!goal) return;
        
        const modal = document.getElementById('goalModal');
        const form = document.getElementById('goalForm');
        const modalTitle = document.getElementById('goalModalTitle');
        const deleteBtn = document.getElementById('deleteGoalBtn');
        
        if (!modal || !form || !modalTitle || !deleteBtn) return;
        
        // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã
        document.getElementById('goalId').value = goal.id;
        document.getElementById('goalName').value = goal.name;
        document.getElementById('goalTarget').value = goal.target;
        document.getElementById('goalCurrent').value = goal.current;
        document.getElementById('goalDeadline').value = goal.deadline;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
        modalTitle.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–ª—å';
        deleteBtn.style.display = 'inline-flex';
        
        // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        modal.style.display = 'flex';
        
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        disablePageScroll();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –æ—Ç–∫—Ä—ã—Ç–∏—è
        requestAnimationFrame(() => {
            modal.classList.add('show');
        });
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ —Ü–µ–ª–∏
    function deleteGoal(id) {
        if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Ü–µ–ª—å?')) return;
        
        const goalIndex = goals.findIndex(g => g.id === id);
        if (goalIndex === -1) return;
        
        // –£–¥–∞–ª–µ–Ω–∏–µ —Ü–µ–ª–∏
        goals.splice(goalIndex, 1);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        updateLocalStorage();
        renderGoals();
        updateDashboard();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Ü–µ–ª–∏
        showPlaceholdersIfNeeded();
    }





    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    function editCategory(categoryId, type) {
        const category = categories[type].find(c => c.id === categoryId);
        if (!category) return;
        
        const modal = document.getElementById('categoryModal');
        const form = document.getElementById('categoryForm');
        const title = document.getElementById('categoryModalTitle');
        const deleteBtn = document.getElementById('deleteCategoryBtn');
        
        if (!modal || !form || !title || !deleteBtn) return;
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        document.getElementById('categoryId').value = category.id;
        document.getElementById('categoryName').value = category.name;
        document.getElementById('categoryIcon').value = category.icon;
        document.getElementById('categoryType').value = type;
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Å–µ–ª–µ–∫—Ç–µ
        const categoryTypeSelect = document.getElementById('categoryTypeSelect');
        if (categoryTypeSelect) {
            categoryTypeSelect.value = type;
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        title.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é';
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
        deleteBtn.style.display = 'inline-flex';
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        modal.style.display = 'flex';
        
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        disablePageScroll();
        
        requestAnimationFrame(() => {
            modal.classList.add('show');
        });
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    function deleteCategory(categoryId, type) {
        if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é?')) return;
        
        const categoryIndex = categories[type].findIndex(c => c.id === categoryId);
        if (categoryIndex === -1) return;
        
        // –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories[type].splice(categoryIndex, 1);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        updateLocalStorage();
        categoriesSettingsLoaded = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
        loadCategoriesSettings();
        renderTransactions();
        updateDashboard();
    }

    // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    function openCategoryModal(type = 'expense') {
        const modal = document.getElementById('categoryModal');
        const form = document.getElementById('categoryForm');
        const title = document.getElementById('categoryModalTitle');
        const deleteBtn = document.getElementById('deleteCategoryBtn');
        
        if (!modal || !form || !title || !deleteBtn) return;
        
        // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
        form.reset();
        document.getElementById('categoryId').value = '';
        document.getElementById('categoryType').value = type;
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Å–µ–ª–µ–∫—Ç–µ
        const categoryTypeSelect = document.getElementById('categoryTypeSelect');
        if (categoryTypeSelect) {
            categoryTypeSelect.value = type;
        }
        
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        title.textContent = '–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é';
        
        // –°–∫—Ä—ã—Ç—å –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        deleteBtn.style.display = 'none';
        
        // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        modal.style.display = 'flex';
        
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        disablePageScroll();
        
        requestAnimationFrame(() => {
            modal.classList.add('show');
        });
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    function closeCategoryModal() {
        const modal = document.getElementById('categoryModal');
        if (modal) {
            modal.classList.remove('show');
            setTimeout(() => {
                modal.style.display = 'none';
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                enablePageScroll();
            }, 400);
        }
    }

    // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –æ–ø–ª–∞—Ç—ã —Ü–µ–ª–∏
    function openPayGoalModal(goalId) {
        const goal = goals.find(g => g.id === goalId);
        if (!goal) return;
        
        const modal = document.getElementById('payGoalModal');
        const goalName = document.getElementById('payGoalName');
        const goalCurrent = document.getElementById('payGoalCurrent');
        const goalTarget = document.getElementById('payGoalTarget');
        const goalRemaining = document.getElementById('payGoalRemaining');
        const goalProgressBar = document.getElementById('payGoalProgressBar');
        const paymentAmount = document.getElementById('paymentAmount');
        const paymentAccount = document.getElementById('paymentAccount');
        const selectedAccountBalance = document.getElementById('selectedAccountBalance');
        
        if (!modal || !goalName || !goalCurrent || !goalTarget || !goalRemaining || 
            !goalProgressBar || !paymentAmount || !paymentAccount || !selectedAccountBalance) return;
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–ª–∏
        goalName.textContent = goal.name;
        goalCurrent.textContent = `${goal.current.toFixed(2)} ‚ÇΩ`;
        goalTarget.textContent = `${goal.target.toFixed(2)} ‚ÇΩ`;
        
        const remainingAmount = Math.max(0, goal.target - goal.current);
        goalRemaining.textContent = `${remainingAmount.toFixed(2)} ‚ÇΩ`;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        const progress = (goal.current / goal.target) * 100;
        goalProgressBar.style.width = `${progress}%`;
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–µ–ª–µ–∫—Ç —Å—á–µ—Ç–æ–≤
        paymentAccount.innerHTML = '';
        accounts.forEach(account => {
            const option = document.createElement('option');
            option.value = account.id;
            option.textContent = `${account.name} (${account.balance.toFixed(2)} ${account.currency})`;
            paymentAccount.appendChild(option);
        });
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Å—á–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        paymentAccount.value = currentAccountId;
        updateSelectedAccountBalance();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—á–µ—Ç–∞
        paymentAccount.addEventListener('change', updateSelectedAccountBalance);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É–º–º—ã –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ —Å –æ—Å—Ç–∞—Ç–∫–æ–º
        paymentAmount.addEventListener('input', function() {
            const amount = parseFloat(this.value) || 0;
            const remainingAmount = Math.max(0, goal.target - goal.current);
            const remainingAmountBtns = document.querySelectorAll('.payment-hint-remaining');
            
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤–≤–æ–¥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º–æ–π
            if (amount > remainingAmount) {
                this.value = remainingAmount.toFixed(2);
            }
            
            remainingAmountBtns.forEach(btn => {
                if (Math.abs(amount - remainingAmount) < 0.01) {
                    btn.classList.add('success');
                } else {
                    btn.classList.remove('success');
                }
            });
        });
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –∫ –æ–ø–ª–∞—Ç–µ
        paymentAmount.max = remainingAmount;
        paymentAmount.placeholder = `0.00 - ${remainingAmount.toFixed(2)}`;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞
        updatePaymentHintButtons(remainingAmount);
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–Ω–æ–ø–∫—É —Å –æ—Å—Ç–∞—Ç–∫–æ–º
        const remainingAmountBtn = document.getElementById('remainingAmountBtn');
        const remainingAmountBtnFirst = document.getElementById('remainingAmountBtnFirst');
        const remainingAmountValue = document.getElementById('remainingAmountValue');
        const remainingAmountValueFirst = document.getElementById('remainingAmountValueFirst');
        
        if (remainingAmountBtn && remainingAmountValue) {
            remainingAmountValue.textContent = `${remainingAmount.toFixed(2)} ‚ÇΩ`;
        }
        if (remainingAmountBtnFirst && remainingAmountValueFirst) {
            remainingAmountValueFirst.textContent = `${remainingAmount.toFixed(2)} ‚ÇΩ`;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        modal.style.display = 'flex';
        
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        disablePageScroll();
        
        requestAnimationFrame(() => {
            modal.classList.add('show');
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏
        addPaymentHintHandlers();
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—á–µ—Ç–∞
    function updateSelectedAccountBalance() {
        const paymentAccount = document.getElementById('paymentAccount');
        const selectedAccountBalance = document.getElementById('selectedAccountBalance');
        
        if (!paymentAccount || !selectedAccountBalance) return;
        
        const selectedAccount = accounts.find(a => a.id === parseInt(paymentAccount.value));
        if (selectedAccount) {
            selectedAccountBalance.textContent = `${selectedAccount.balance.toFixed(2)} ${selectedAccount.currency}`;
        }
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã
    function updatePaymentHintButtons(maxAmount) {
        const paymentHintBtns = document.querySelectorAll('.payment-hint-btn:not(.payment-hint-remaining)');
        paymentHintBtns.forEach(btn => {
            const amount = parseFloat(btn.dataset.amount);
            if (amount > maxAmount) {
                // –ö–Ω–æ–ø–∫–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É - –¥–µ–ª–∞–µ–º –µ—ë –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π
                btn.style.opacity = '0.5';
                btn.style.cursor = 'not-allowed';
                btn.title = `–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: ${maxAmount.toFixed(2)} ‚ÇΩ`;
            } else {
                // –ö–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞
                btn.style.opacity = '1';
                btn.style.cursor = 'pointer';
                btn.title = '';
            }
        });
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏
    function addPaymentHintHandlers() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ —Å —Å—É–º–º–∞–º–∏
        const paymentHintBtns = document.querySelectorAll('.payment-hint-btn:not(.payment-hint-remaining)');
        paymentHintBtns.forEach(btn => {
            btn.onclick = function() {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞
                if (this.style.opacity === '0.5') {
                    return; // –ö–Ω–æ–ø–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞
                }
                
                const amount = parseFloat(this.dataset.amount);
                const paymentAmount = document.getElementById('paymentAmount');
                if (paymentAmount) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É
                    const maxAmount = parseFloat(paymentAmount.max);
                    if (maxAmount && amount > maxAmount) {
                        // –ï—Å–ª–∏ —Å—É–º–º–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é
                        paymentAmount.value = maxAmount.toFixed(2);
                    } else {
                        paymentAmount.value = amount;
                    }
                    // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
                    paymentAmount.focus();
                    btn.classList.add('pulse');
                    setTimeout(() => btn.classList.remove('pulse'), 600);
                }
            };
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            btn.onkeydown = function(e) {
                if (e.key === 'Enter' || e.key === ' ') {
                    e.preventDefault();
                    this.click();
                }
            };
            
            // –î–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ–π –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            btn.setAttribute('tabindex', '0');
            btn.setAttribute('role', 'button');
            btn.setAttribute('aria-label', `–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Å—É–º–º—É ${btn.dataset.amount} ‚ÇΩ`);
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å –æ—Å—Ç–∞—Ç–∫–æ–º —Ü–µ–ª–∏
        const remainingAmountBtns = document.querySelectorAll('.payment-hint-remaining');
        remainingAmountBtns.forEach(btn => {
            btn.onclick = function() {
                const remainingAmountText = this.querySelector('.remaining-amount-value');
                if (remainingAmountText) {
                    const amount = parseFloat(remainingAmountText.textContent.replace(' ‚ÇΩ', ''));
                    const paymentAmount = document.getElementById('paymentAmount');
                    if (paymentAmount && !isNaN(amount)) {
                        paymentAmount.value = amount;
                        // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
                        paymentAmount.focus();
                        btn.classList.add('pulse');
                        setTimeout(() => btn.classList.remove('pulse'), 600);
                    }
                }
            };
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            btn.onkeydown = function(e) {
                if (e.key === 'Enter' || e.key === ' ') {
                    e.preventDefault();
                    this.click();
                }
            };
            
            // –î–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ–π –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            btn.setAttribute('tabindex', '0');
            btn.setAttribute('role', 'button');
            btn.setAttribute('aria-label', '–ó–∞–ø–æ–ª–Ω–∏—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ —Ü–µ–ª–∏');
        });
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–Ω–æ–ø–æ–∫ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏ –∏–∫–æ–Ω–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    function addCategoryIconHintHandlers() {
        const iconHintButtons = document.querySelectorAll('.icon-hint-btn');
        iconHintButtons.forEach(button => {
            button.addEventListener('click', function() {
                const icon = this.dataset.icon;
                if (icon) {
                    const categoryIcon = document.getElementById('categoryIcon');
                    if (categoryIcon) {
                        categoryIcon.value = icon;
                    }
                }
            });
        });
    }

    // –û–ø–ª–∞—Ç–∞ —Ü–µ–ª–∏ —Å –±–∞–ª–∞–Ω—Å–∞ (—á–∞—Å—Ç–∏—á–Ω–∞—è –∏–ª–∏ –ø–æ–ª–Ω–∞—è)
    function payGoal(goalId, target, current) {
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã
        openPayGoalModal(goalId);
    }

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã —Ü–µ–ª–∏
    function confirmGoalPayment() {
        const paymentAmount = document.getElementById('paymentAmount');
        const paymentAccount = document.getElementById('paymentAccount');
        
        if (!paymentAmount || !paymentAccount) return;
        
        const amount = parseFloat(paymentAmount.value);
        const accountId = parseInt(paymentAccount.value);
        
        if (!amount || amount <= 0) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –¥–ª—è –æ–ø–ª–∞—Ç—ã');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–∞ max
        const maxAmount = parseFloat(paymentAmount.max);
        if (maxAmount && amount > maxAmount) {
            alert(`–°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã (${amount.toFixed(2)} ‚ÇΩ) –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—É—é —Å—É–º–º—É (${maxAmount.toFixed(2)} ‚ÇΩ)`);
            return;
        }
        
        const selectedAccount = accounts.find(a => a.id === accountId);
        if (!selectedAccount) {
            alert('–°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        if (selectedAccount.balance < amount) {
            alert(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç–µ "${selectedAccount.name}". –î–æ—Å—Ç—É–ø–Ω–æ: ${selectedAccount.balance.toFixed(2)} ${selectedAccount.currency}`);
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª—å –∏–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        const goalName = document.getElementById('payGoalName');
        if (!goalName) return;
        
        const goal = goals.find(g => g.name === goalName.textContent);
        if (!goal) {
            alert('–¶–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –ª–∏ —É–∂–µ —Ü–µ–ª—å
        if (goal.current >= goal.target) {
            alert('–¶–µ–ª—å —É–∂–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ —Å—É–º–º–∞ –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å —Ü–µ–ª–∏
        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ goal.current –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç goal.target
        if (goal.current > goal.target) {
            goal.current = goal.target;
        }
        
        const remainingAmount = Math.max(0, goal.target - goal.current);
        if (remainingAmount <= 0) {
            alert('–¶–µ–ª—å —É–∂–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –∏–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∞. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.');
            return;
        }
        if (amount > remainingAmount) {
            alert(`–°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã (${amount.toFixed(2)} ‚ÇΩ) –ø—Ä–µ–≤—ã—à–∞–µ—Ç –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å —Ü–µ–ª–∏ (${remainingAmount.toFixed(2)} ‚ÇΩ). –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: ${remainingAmount.toFixed(2)} ‚ÇΩ`);
            return;
        }
        
        // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å–æ —Å—á–µ—Ç–∞
        selectedAccount.balance -= amount;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–ª—å
        goal.current += amount;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        const transaction = {
            id: generateId(transactions),
            type: 'expense',
            amount: amount,
            category: 'other',
            date: new Date().toISOString().split('T')[0],
            description: `–û–ø–ª–∞—Ç–∞ —Ü–µ–ª–∏: ${goal.name}`,
            accountId: accountId
        };
        
        transactions.push(transaction);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        updateLocalStorage();
        renderAccounts();
        renderTransactions();
        renderGoals();
        updateDashboard();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Ü–µ–ª–∏
        showPlaceholdersIfNeeded();
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        closeAllModals();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        if (goal.current >= goal.target) {
            alert(`–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¶–µ–ª—å "${goal.name}" —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!`);
        } else {
            alert(`–£—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω–æ ${amount.toFixed(2)} ‚ÇΩ –¥–ª—è —Ü–µ–ª–∏ "${goal.name}". –ü—Ä–æ–≥—Ä–µ—Å—Å: ${((goal.current / goal.target) * 100).toFixed(1)}%`);
        }
    }

    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—á–µ—Ç–∞
    function editAccount(id) {
        openAccountModal(id);
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞
    function deleteAccount(id) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–∏–º —Å—á–µ—Ç–æ–º
        const accountTransactions = transactions.filter(t => t.accountId === id);
        if (accountTransactions.length > 0) {
            if (!confirm(`–£ —ç—Ç–æ–≥–æ —Å—á–µ—Ç–∞ –µ—Å—Ç—å ${accountTransactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π. –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—á–µ—Ç–∞ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Ç–∞–∫–∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?`)) {
                return;
            }
            
            // –£–¥–∞–ª–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            transactions = transactions.filter(t => t.accountId !== id);
        }
        
        if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Å—á–µ—Ç?')) return;
        
        const accountIndex = accounts.findIndex(a => a.id === id);
        if (accountIndex === -1) return;
        
        // –£–¥–∞–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞
        accounts.splice(accountIndex, 1);
        
        // –ï—Å–ª–∏ —É–¥–∞–ª–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —Å—á–µ—Ç, —Å–¥–µ–ª–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º –ø–µ—Ä–≤—ã–π —Å—á–µ—Ç (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å)
        if (currentAccountId === id) {
            currentAccountId = accounts.length > 0 ? accounts[0].id : null;
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        updateLocalStorage();
        renderAccounts();
        renderTransactions(); // –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (—Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—á–µ—Ç–æ–≤)
        updateDashboard();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã (—É–±–∏—Ä–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–π —Å—á–µ—Ç –∏–∑ —Ñ–∏–ª—å—Ç—Ä–∞)
        initFilters();
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        closeAllModals();
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã –ø–µ—Ä–µ–≤–æ–¥–∞
    function handleTransferSubmit(e) {
        e.preventDefault();
        
        const fromAccountId = parseInt(document.getElementById('transferFromAccount').value);
        const toAccountId = parseInt(document.getElementById('transferToAccount').value);
        const amount = parseFloat(document.getElementById('transferAmount').value);
        const description = '–ü–µ—Ä–µ–≤–æ–¥ –º–µ–∂–¥—É —Å—á–µ—Ç–∞–º–∏';
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!fromAccountId || !toAccountId) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—á–µ—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞');
            return;
        }
        
        if (fromAccountId === toAccountId) {
            alert('–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –¥–µ–Ω—å–≥–∏ –Ω–∞ —Ç–æ—Ç –∂–µ —Å—á–µ—Ç');
            return;
        }
        
        if (!amount || amount <= 0) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É');
            return;
        }
        
        const fromAccount = accounts.find(acc => acc.id === fromAccountId);
        const toAccount = accounts.find(acc => acc.id === toAccountId);
        
        if (!fromAccount || !toAccount) {
            alert('–û—à–∏–±–∫–∞: —Å—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        if (fromAccount.balance < amount) {
            alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞');
            return;
        }
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ (—Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω—è–µ–º –±–∞–ª–∞–Ω—Å—ã —Å—á–µ—Ç–æ–≤)
        fromAccount.balance -= amount;
        toAccount.balance += amount;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å—á–µ—Ç–∞—Ö (–±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)
        localStorage.setItem('accounts', JSON.stringify(accounts));
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        updateDashboard();
        renderAccounts();
        renderTransactions();
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        closeAllModals();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        alert(`–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Å—É–º–º—É ${amount.toFixed(2)} ‚ÇΩ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!`);
    }

        // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±—Ä–∞—É–∑–µ—Ä–Ω—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
        window.addEventListener('error', (e) => {
            if (e.message && (
                e.message.includes('message port closed') || 
                e.message.includes('message channel closed') ||
                e.message.includes('listener indicated an asynchronous response') ||
                e.message.includes('Extension context invalidated') ||
                e.message.includes('Could not establish connection') ||
                e.message.includes('Receiving end does not exist')
            )) {
                e.preventDefault();
                e.stopPropagation();
                return false;
            }
        });
        
        window.addEventListener('unhandledrejection', (e) => {
            if (e.reason && e.reason.message && (
                e.reason.message.includes('message port closed') || 
                e.reason.message.includes('message channel closed') ||
                e.reason.message.includes('listener indicated an asynchronous response') ||
                e.reason.message.includes('Extension context invalidated') ||
                e.reason.message.includes('Could not establish connection') ||
                e.reason.message.includes('Receiving end does not exist')
            )) {
                e.preventDefault();
                e.stopPropagation();
                return false;
            }
        });

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ DOM
        document.addEventListener('DOMContentLoaded', initApp);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏
        document.addEventListener('DOMContentLoaded', function() {
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            setTimeout(() => {
                addPaymentHintHandlers();
                addCategoryIconHintHandlers();
                addTransferHandlers();
            }, 100);
        });

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Ñ–æ—Ä–º—ã –ø–µ—Ä–µ–≤–æ–¥–∞
        function addTransferHandlers() {
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—á–µ—Ç–∞ —Å–ø–∏—Å–∞–Ω–∏—è
            const fromAccountSelect = document.getElementById('transferFromAccount');
            if (fromAccountSelect) {
                fromAccountSelect.addEventListener('change', handleFromAccountChange);
            }

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—á–µ—Ç–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è
            const toAccountSelect = document.getElementById('transferToAccount');
            if (toAccountSelect) {
                toAccountSelect.addEventListener('change', updateTransferSummary);
            }

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É–º–º—ã
            const amountInput = document.getElementById('transferAmount');
            if (amountInput) {
                amountInput.addEventListener('input', updateTransferSummary);
            }

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã
            const amountHintBtns = document.querySelectorAll('.amount-hint-btn');
            amountHintBtns.forEach(btn => {
                btn.addEventListener('click', function() {
                    const amount = parseFloat(this.dataset.amount);
                    setTransferAmount(amount);
                });
            });
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        window.addEventListener('resize', () => {
            const activeTab = document.querySelector('.tab-item.active');
            if (activeTab) {
                updateTabIndicator(activeTab);
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏—à–∏ Escape –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                closeAllModals();
            }
        });

        // –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–≤–∞—é—â–µ–≥–æ –≤–∏–¥–∂–µ—Ç–∞
        function createFloatingWidget() {
            const floatingActionWidget = document.createElement('div');
            floatingActionWidget.className = 'floating-action-widget';
            floatingActionWidget.id = 'floatingActionWidget';
            floatingActionWidget.innerHTML = `
                <div class="fab-menu" id="fabMenu">
                    <div class="fab-item fab-expense" id="fabExpense" title="–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥" onclick="openExpenseModal()">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="20" height="20" fill="currentColor">
                            <path d="M19 13H5v-2h14v2z"/>
                        </svg>
                        <span>–†–∞—Å—Ö–æ–¥</span>
                    </div>
                    <div class="fab-item fab-income" id="fabIncome" title="–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥" onclick="openIncomeModal()">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="20" height="20" fill="currentColor">
                            <path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>
                        </svg>
                        <span>–î–æ—Ö–æ–¥</span>
                    </div>
                </div>
                <div class="fab-main" id="fabMain">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" fill="currentColor">
                        <path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>
                    </svg>
                </div>
            `;
            document.body.appendChild(floatingActionWidget);

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–ª–∞–≤–∞—é—â–µ–≥–æ –≤–∏–¥–∂–µ—Ç–∞
            const fabMain = document.getElementById('fabMain');
            const fabMenu = document.getElementById('fabMenu');
            const fabExpense = document.getElementById('fabExpense');
            const fabIncome = document.getElementById('fabIncome');

            if (fabMain && fabMenu && fabExpense && fabIncome) {
                // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–Ω—é
                fabMain.addEventListener('click', function() {
                    fabMenu.classList.toggle('active');
                    fabMain.classList.toggle('active');
                });

                // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞
                fabExpense.addEventListener('click', function() {
                    openExpenseModal();
                    fabMenu.classList.remove('active');
                    fabMain.classList.remove('active');
                });

                // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞
                fabIncome.addEventListener('click', function() {
                    openIncomeModal();
                    fabMenu.classList.remove('active');
                    fabMain.classList.remove('active');
                });

                // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –≤–∏–¥–∂–µ—Ç–∞
                document.addEventListener('click', function(e) {
                    if (!e.target.closest('.floating-action-widget')) {
                        fabMenu.classList.remove('active');
                        fabMain.classList.remove('active');
                    }
                });
            }
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–≤–∞—é—â–µ–≥–æ –≤–∏–¥–∂–µ—Ç–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        document.addEventListener('DOMContentLoaded', function() {
            createFloatingWidget();
        });

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–∞–ª—é—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
        document.addEventListener('DOMContentLoaded', function() {
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞–ª—é—Ç —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞–ª—é—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM');
        });
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç–∞
        setTimeout(() => {
            const addAccountBtn = document.getElementById('addAccountBtn');

            if (addAccountBtn) {
                addAccountBtn.addEventListener('click', () => {
                    openAccountModal();
                });
            }
        }, 1000);
        
        // –í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ localStorage (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö:
        // localStorage.clear();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        initApp();

